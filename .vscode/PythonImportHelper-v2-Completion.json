[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "Update",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "Update",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "InputMediaPhoto",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "Update",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "InputMediaPhoto",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardButton",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardMarkup",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "Update",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "CommandHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CallbackContext",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CommandHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "MessageHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CallbackContext",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CommandHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "MessageHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CallbackQueryHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CallbackContext",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "ApplicationBuilder",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CommandHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "AbstractBot",
        "importPath": "tg_bot.bot.abstract",
        "description": "tg_bot.bot.abstract",
        "isExtraImport": true,
        "detail": "tg_bot.bot.abstract",
        "documentation": {}
    },
    {
        "label": "AbstractBot",
        "importPath": "tg_bot.bot.abstract",
        "description": "tg_bot.bot.abstract",
        "isExtraImport": true,
        "detail": "tg_bot.bot.abstract",
        "documentation": {}
    },
    {
        "label": "image_url",
        "importPath": "tg_bot.bot.wb_image_url",
        "description": "tg_bot.bot.wb_image_url",
        "isExtraImport": true,
        "detail": "tg_bot.bot.wb_image_url",
        "documentation": {}
    },
    {
        "label": "TgUser",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "ParseProduct",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "TgUserProduct",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "TgUser",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "TarotDeck",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "TarotCardItem",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "TarotCard",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "ExtendedMeaning",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "TarotCard",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "ExtendedMeaning",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "TarotCard",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "TarotDeck",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "TarotCardItem",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "TgUser",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "ParserBot",
        "importPath": "tg_bot.bot.parser",
        "description": "tg_bot.bot.parser",
        "isExtraImport": true,
        "detail": "tg_bot.bot.parser",
        "documentation": {}
    },
    {
        "label": "TarotBot",
        "importPath": "tg_bot.bot.tarot",
        "description": "tg_bot.bot.tarot",
        "isExtraImport": true,
        "detail": "tg_bot.bot.tarot",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "app.server.asgi",
        "description": "app.server.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "app.server.asgi",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.server.celery",
        "description": "app.server.celery",
        "peekOfCode": "app = Celery('server')\napp.config_from_object('django.conf:settings', namespace='CELERY')\napp.autodiscover_tasks()",
        "detail": "app.server.celery",
        "documentation": {}
    },
    {
        "label": "ColorFormatter",
        "kind": 6,
        "importPath": "app.server.logger",
        "description": "app.server.logger",
        "peekOfCode": "class ColorFormatter(logging.Formatter):\n    COLORS = {\n        'DEBUG': '\\033[92m',     # Green\n        'INFO': '\\033[94m',      # Blue\n        'WARNING': '\\033[93m',   # Yellow\n        'ERROR': '\\033[91m',     # Red\n        'CRITICAL': '\\033[1;91m' # Bold Red\n    }\n    RESET = '\\033[0m'\n    def format(self, record):",
        "detail": "app.server.logger",
        "documentation": {}
    },
    {
        "label": "formatter",
        "kind": 5,
        "importPath": "app.server.logger",
        "description": "app.server.logger",
        "peekOfCode": "formatter = ColorFormatter('%(asctime)s [%(levelname)s] || %(filename)s:%(lineno)d %(message)s')\nconsole_handler = logging.StreamHandler()\nconsole_handler.setFormatter(formatter)\nlogger = logging.getLogger('')\nlogger.setLevel(logging.INFO)\nlogger.addHandler(console_handler)",
        "detail": "app.server.logger",
        "documentation": {}
    },
    {
        "label": "console_handler",
        "kind": 5,
        "importPath": "app.server.logger",
        "description": "app.server.logger",
        "peekOfCode": "console_handler = logging.StreamHandler()\nconsole_handler.setFormatter(formatter)\nlogger = logging.getLogger('')\nlogger.setLevel(logging.INFO)\nlogger.addHandler(console_handler)",
        "detail": "app.server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.server.logger",
        "description": "app.server.logger",
        "peekOfCode": "logger = logging.getLogger('')\nlogger.setLevel(logging.INFO)\nlogger.addHandler(console_handler)",
        "detail": "app.server.logger",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-vhpeg0+^tpklr65dn3l4(s*3xvn@2l7r(*w@lfyufj%yy7i0p=\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\n    \"localhost\",\n    os.environ.get(\"TG_WEBHOOK_HOST\"),",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-vhpeg0+^tpklr65dn3l4(s*3xvn@2l7r(*w@lfyufj%yy7i0p=\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\n    \"localhost\",\n    os.environ.get(\"TG_WEBHOOK_HOST\"),\n]\nTG_WEBHOOK_HOST = f\"https://{os.environ.get('TG_WEBHOOK_HOST')}\"\nPICTURE_CHAT = os.environ.get(\"PICTURE_CHAT\")\nPARSER_URL = os.environ.get(\"PARSER\")",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\n    \"localhost\",\n    os.environ.get(\"TG_WEBHOOK_HOST\"),\n]\nTG_WEBHOOK_HOST = f\"https://{os.environ.get('TG_WEBHOOK_HOST')}\"\nPICTURE_CHAT = os.environ.get(\"PICTURE_CHAT\")\nPARSER_URL = os.environ.get(\"PARSER\")\nTG_DEBUG = os.environ.get(\"TG_DEBUG\").lower() == \"true\"\nCSRF_TRUSTED_ORIGINS = (TG_WEBHOOK_HOST,)",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\n    \"localhost\",\n    os.environ.get(\"TG_WEBHOOK_HOST\"),\n]\nTG_WEBHOOK_HOST = f\"https://{os.environ.get('TG_WEBHOOK_HOST')}\"\nPICTURE_CHAT = os.environ.get(\"PICTURE_CHAT\")\nPARSER_URL = os.environ.get(\"PARSER\")\nTG_DEBUG = os.environ.get(\"TG_DEBUG\").lower() == \"true\"\nCSRF_TRUSTED_ORIGINS = (TG_WEBHOOK_HOST,)\nCORS_ORIGIN_ALLOW_ALL = False",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "TG_WEBHOOK_HOST",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "TG_WEBHOOK_HOST = f\"https://{os.environ.get('TG_WEBHOOK_HOST')}\"\nPICTURE_CHAT = os.environ.get(\"PICTURE_CHAT\")\nPARSER_URL = os.environ.get(\"PARSER\")\nTG_DEBUG = os.environ.get(\"TG_DEBUG\").lower() == \"true\"\nCSRF_TRUSTED_ORIGINS = (TG_WEBHOOK_HOST,)\nCORS_ORIGIN_ALLOW_ALL = False\nCORS_ORIGIN_WHITELIST = [\n    TG_WEBHOOK_HOST,\n]\n# Application definition",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "PICTURE_CHAT",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "PICTURE_CHAT = os.environ.get(\"PICTURE_CHAT\")\nPARSER_URL = os.environ.get(\"PARSER\")\nTG_DEBUG = os.environ.get(\"TG_DEBUG\").lower() == \"true\"\nCSRF_TRUSTED_ORIGINS = (TG_WEBHOOK_HOST,)\nCORS_ORIGIN_ALLOW_ALL = False\nCORS_ORIGIN_WHITELIST = [\n    TG_WEBHOOK_HOST,\n]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "PARSER_URL",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "PARSER_URL = os.environ.get(\"PARSER\")\nTG_DEBUG = os.environ.get(\"TG_DEBUG\").lower() == \"true\"\nCSRF_TRUSTED_ORIGINS = (TG_WEBHOOK_HOST,)\nCORS_ORIGIN_ALLOW_ALL = False\nCORS_ORIGIN_WHITELIST = [\n    TG_WEBHOOK_HOST,\n]\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "TG_DEBUG",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "TG_DEBUG = os.environ.get(\"TG_DEBUG\").lower() == \"true\"\nCSRF_TRUSTED_ORIGINS = (TG_WEBHOOK_HOST,)\nCORS_ORIGIN_ALLOW_ALL = False\nCORS_ORIGIN_WHITELIST = [\n    TG_WEBHOOK_HOST,\n]\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = (TG_WEBHOOK_HOST,)\nCORS_ORIGIN_ALLOW_ALL = False\nCORS_ORIGIN_WHITELIST = [\n    TG_WEBHOOK_HOST,\n]\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_ALLOW_ALL",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CORS_ORIGIN_ALLOW_ALL = False\nCORS_ORIGIN_WHITELIST = [\n    TG_WEBHOOK_HOST,\n]\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_WHITELIST",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CORS_ORIGIN_WHITELIST = [\n    TG_WEBHOOK_HOST,\n]\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",\n    \"tg_bot\",\n]",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\nROOT_URLCONF = \"server.urls\"",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "ROOT_URLCONF = \"server.urls\"\n# Для сборки статических файлов\nSTATIC_URL = \"/static/\"  # URL для доступа к статическим файлам\n# Путь к папке, куда будут собираться статические файлы\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")  # Папка для собранных статических файлов\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"  # URL для доступа к статическим файлам\n# Путь к папке, куда будут собираться статические файлы\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")  # Папка для собранных статических файлов\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, \"static\")  # Папка для собранных статических файлов\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "WSGI_APPLICATION = \"server.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.getenv(\"POSTGRES_DB\"),\n        \"USER\": os.getenv(\"POSTGRES_USER\"),\n        \"PASSWORD\": os.getenv(\"POSTGRES_PASSWORD\"),\n        \"HOST\": os.getenv(\"POSTGRES_HOST\"),",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.getenv(\"POSTGRES_DB\"),\n        \"USER\": os.getenv(\"POSTGRES_USER\"),\n        \"PASSWORD\": os.getenv(\"POSTGRES_PASSWORD\"),\n        \"HOST\": os.getenv(\"POSTGRES_HOST\"),\n        \"PORT\": os.getenv(\"POSTGRES_PORT\"),\n    }\n}",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_ALWAYS_EAGER",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CELERY_TASK_ALWAYS_EAGER = False  # чтобы задачи не выполнялись синхронно\nCELERY_TASK_EAGER_PROPAGATES = True\nCELERY_BROKER_URL = f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/0'\nCELERY_ACCEPT_CONTENT = [\"json\"]\nCELERY_TASK_SERIALIZER = \"json\"\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/1',\n    }",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_EAGER_PROPAGATES",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CELERY_TASK_EAGER_PROPAGATES = True\nCELERY_BROKER_URL = f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/0'\nCELERY_ACCEPT_CONTENT = [\"json\"]\nCELERY_TASK_SERIALIZER = \"json\"\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/1',\n    }\n}",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CELERY_BROKER_URL = f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/0'\nCELERY_ACCEPT_CONTENT = [\"json\"]\nCELERY_TASK_SERIALIZER = \"json\"\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/1',\n    }\n}\n# Password validation",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_ACCEPT_CONTENT",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CELERY_ACCEPT_CONTENT = [\"json\"]\nCELERY_TASK_SERIALIZER = \"json\"\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/1',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_SERIALIZER",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CELERY_TASK_SERIALIZER = \"json\"\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/1',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/1',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nLOGGING = {",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nLOGGING = {\n    \"version\": 1,",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"handlers\": {},\n    \"loggers\": {\n        \"\": {},",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"handlers\": {},\n    \"loggers\": {\n        \"\": {},\n    },\n}",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "LOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"handlers\": {},\n    \"loggers\": {\n        \"\": {},\n    },\n}",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.server.urls",
        "description": "app.server.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('bot/', include('tg_bot.urls')),  # Подключаем маршруты tg_bot\n]",
        "detail": "app.server.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "app.server.wsgi",
        "description": "app.server.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "app.server.wsgi",
        "documentation": {}
    },
    {
        "label": "AbstractBot",
        "kind": 6,
        "importPath": "app.tg_bot.bot.abstract",
        "description": "app.tg_bot.bot.abstract",
        "peekOfCode": "class AbstractBot(ABC):\n    handlers = []\n    @abstractmethod\n    def get_handlers(self):\n        pass",
        "detail": "app.tg_bot.bot.abstract",
        "documentation": {}
    },
    {
        "label": "ParserBot",
        "kind": 6,
        "importPath": "app.tg_bot.bot.parser",
        "description": "app.tg_bot.bot.parser",
        "peekOfCode": "class ParserBot(AbstractBot):\n    def __init__(self):\n        self.handlers = self.get_handlers()\n    def get_handlers(self):\n        return [\n            MessageHandler(\n                filters.TEXT & ~filters.COMMAND & filters.Regex(combined_regexp),\n                self.handle_links_based_on_message,\n            ),\n            CommandHandler(\"last\", self.handle_last_products),  # Обработчик для команды /last",
        "detail": "app.tg_bot.bot.parser",
        "documentation": {}
    },
    {
        "label": "PICTURE_CHAT",
        "kind": 5,
        "importPath": "app.tg_bot.bot.parser",
        "description": "app.tg_bot.bot.parser",
        "peekOfCode": "PICTURE_CHAT = settings.PICTURE_CHAT\nPARSER_URL = settings.PARSER_URL\n# Класс для парсера бота, который наследует AbstractBot\nwb_regexp = r\"wildberries\\.ru\\/(catalog\\/(\\d*)|product\\?card=(\\d*))\"\nozon_regexp = r\"ozon\\.ru\\/(t\\/[^\\s]*)\\/?\"\ncombined_regexp = f\"({wb_regexp}|{ozon_regexp})\"\nclass ParserBot(AbstractBot):\n    def __init__(self):\n        self.handlers = self.get_handlers()\n    def get_handlers(self):",
        "detail": "app.tg_bot.bot.parser",
        "documentation": {}
    },
    {
        "label": "PARSER_URL",
        "kind": 5,
        "importPath": "app.tg_bot.bot.parser",
        "description": "app.tg_bot.bot.parser",
        "peekOfCode": "PARSER_URL = settings.PARSER_URL\n# Класс для парсера бота, который наследует AbstractBot\nwb_regexp = r\"wildberries\\.ru\\/(catalog\\/(\\d*)|product\\?card=(\\d*))\"\nozon_regexp = r\"ozon\\.ru\\/(t\\/[^\\s]*)\\/?\"\ncombined_regexp = f\"({wb_regexp}|{ozon_regexp})\"\nclass ParserBot(AbstractBot):\n    def __init__(self):\n        self.handlers = self.get_handlers()\n    def get_handlers(self):\n        return [",
        "detail": "app.tg_bot.bot.parser",
        "documentation": {}
    },
    {
        "label": "wb_regexp",
        "kind": 5,
        "importPath": "app.tg_bot.bot.parser",
        "description": "app.tg_bot.bot.parser",
        "peekOfCode": "wb_regexp = r\"wildberries\\.ru\\/(catalog\\/(\\d*)|product\\?card=(\\d*))\"\nozon_regexp = r\"ozon\\.ru\\/(t\\/[^\\s]*)\\/?\"\ncombined_regexp = f\"({wb_regexp}|{ozon_regexp})\"\nclass ParserBot(AbstractBot):\n    def __init__(self):\n        self.handlers = self.get_handlers()\n    def get_handlers(self):\n        return [\n            MessageHandler(\n                filters.TEXT & ~filters.COMMAND & filters.Regex(combined_regexp),",
        "detail": "app.tg_bot.bot.parser",
        "documentation": {}
    },
    {
        "label": "ozon_regexp",
        "kind": 5,
        "importPath": "app.tg_bot.bot.parser",
        "description": "app.tg_bot.bot.parser",
        "peekOfCode": "ozon_regexp = r\"ozon\\.ru\\/(t\\/[^\\s]*)\\/?\"\ncombined_regexp = f\"({wb_regexp}|{ozon_regexp})\"\nclass ParserBot(AbstractBot):\n    def __init__(self):\n        self.handlers = self.get_handlers()\n    def get_handlers(self):\n        return [\n            MessageHandler(\n                filters.TEXT & ~filters.COMMAND & filters.Regex(combined_regexp),\n                self.handle_links_based_on_message,",
        "detail": "app.tg_bot.bot.parser",
        "documentation": {}
    },
    {
        "label": "combined_regexp",
        "kind": 5,
        "importPath": "app.tg_bot.bot.parser",
        "description": "app.tg_bot.bot.parser",
        "peekOfCode": "combined_regexp = f\"({wb_regexp}|{ozon_regexp})\"\nclass ParserBot(AbstractBot):\n    def __init__(self):\n        self.handlers = self.get_handlers()\n    def get_handlers(self):\n        return [\n            MessageHandler(\n                filters.TEXT & ~filters.COMMAND & filters.Regex(combined_regexp),\n                self.handle_links_based_on_message,\n            ),",
        "detail": "app.tg_bot.bot.parser",
        "documentation": {}
    },
    {
        "label": "TarotBot",
        "kind": 6,
        "importPath": "app.tg_bot.bot.tarot",
        "description": "app.tg_bot.bot.tarot",
        "peekOfCode": "class TarotBot(AbstractBot):\n    def __init__(self):\n        self.handlers = self.get_handlers()\n    def get_handlers(self):\n        return [\n            MessageHandler(\n                filters.COMMAND\n                & filters.TEXT\n                & filters.ChatType.PRIVATE\n                & filters.Regex(r\"^\\/card(\\d+)?\"),",
        "detail": "app.tg_bot.bot.tarot",
        "documentation": {}
    },
    {
        "label": "ImgServer",
        "kind": 6,
        "importPath": "app.tg_bot.bot.wb_image_url",
        "description": "app.tg_bot.bot.wb_image_url",
        "peekOfCode": "class ImgServer:\n    @staticmethod\n    def vol_host_v2(e):\n        if 0 <= e <= 143:\n            t = \"01\"\n        elif e <= 287:\n            t = \"02\"\n        elif e <= 431:\n            t = \"03\"\n        elif e <= 719:",
        "detail": "app.tg_bot.bot.wb_image_url",
        "documentation": {}
    },
    {
        "label": "image_url",
        "kind": 2,
        "importPath": "app.tg_bot.bot.wb_image_url",
        "description": "app.tg_bot.bot.wb_image_url",
        "peekOfCode": "def image_url(e, t='c516x688'):\n    s = int(e)\n    return f\"{img_server.construct_host_v2(s)}/images/{t}/\"\nclass ImgServer:\n    @staticmethod\n    def vol_host_v2(e):\n        if 0 <= e <= 143:\n            t = \"01\"\n        elif e <= 287:\n            t = \"02\"",
        "detail": "app.tg_bot.bot.wb_image_url",
        "documentation": {}
    },
    {
        "label": "img_server",
        "kind": 5,
        "importPath": "app.tg_bot.bot.wb_image_url",
        "description": "app.tg_bot.bot.wb_image_url",
        "peekOfCode": "img_server = ImgServer()",
        "detail": "app.tg_bot.bot.wb_image_url",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.tg_bot.management.commands.load_tarot_cards",
        "description": "app.tg_bot.management.commands.load_tarot_cards",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Загружает данные о картах Таро из JSON-файла в базу данных.\"\n    def handle(self, *args, **kwargs):\n        # Путь к JSON-файлу\n        json_file_path = settings.BASE_DIR / \"tg_bot\" / \"tarot_data\" / \"cards.json\"\n        # Чтение JSON-файла\n        with open(json_file_path, \"r\", encoding=\"utf-8\") as file:\n            tarot_data = json.load(file)\n        for card_id, card_data in tarot_data.items():\n            # Создание или обновление карты",
        "detail": "app.tg_bot.management.commands.load_tarot_cards",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.tg_bot.management.commands.load_tarot_decks",
        "description": "app.tg_bot.management.commands.load_tarot_decks",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Загружает колоды и карты из JSON-файлов в папке decks.\"\n    def handle(self, *args, **kwargs):\n        # Путь к файлу decks.json\n        decks_file_path = settings.BASE_DIR / \"tg_bot\" / \"tarot_data\" / \"decks.json\"\n        # Проверяем, существует ли файл\n        if not decks_file_path.exists():\n            self.stdout.write(self.style.ERROR(f\"Файл {decks_file_path} не найден.\"))\n            return\n        # Чтение файла decks.json",
        "detail": "app.tg_bot.management.commands.load_tarot_decks",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.tg_bot.management.commands.start_bot_processing",
        "description": "app.tg_bot.management.commands.start_bot_processing",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Запуск процесса для всех ботов\"\n    def handle(self, *args, **kwargs):\n        from tg_bot.models import Bot\n        from tg_bot.tasks import process_bot\n        logger.info(\"Запуск команды start_bot_processing.\")\n        try:\n            logger.info(\"Запуск обработки ботов...\")\n            from tg_bot.models import Bot\n            # Получаем всех ботов",
        "detail": "app.tg_bot.management.commands.start_bot_processing",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0001_initial",
        "description": "app.tg_bot.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Bot',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, verbose_name='Название бота')),",
        "detail": "app.tg_bot.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0002_parseproduct_tguser_tguserproduct",
        "description": "app.tg_bot.migrations.0002_parseproduct_tguser_tguserproduct",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ParseProduct',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('product_id', models.CharField(max_length=255, verbose_name='ID товара')),",
        "detail": "app.tg_bot.migrations.0002_parseproduct_tguser_tguserproduct",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0003_tarotcard_tarotdeck_alter_parseproduct_options_and_more_squashed_0004_alter_tarotcarditem_unique_together_and_more",
        "description": "app.tg_bot.migrations.0003_tarotcard_tarotdeck_alter_parseproduct_options_and_more_squashed_0004_alter_tarotcarditem_unique_together_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    replaces = [('tg_bot', '0003_tarotcard_tarotdeck_alter_parseproduct_options_and_more'), ('tg_bot', '0004_alter_tarotcarditem_unique_together_and_more')]\n    dependencies = [\n        ('tg_bot', '0002_parseproduct_tguser_tguserproduct'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TarotCard',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "app.tg_bot.migrations.0003_tarotcard_tarotdeck_alter_parseproduct_options_and_more_squashed_0004_alter_tarotcarditem_unique_together_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0005_alter_bot_options_bot_bot_type",
        "description": "app.tg_bot.migrations.0005_alter_bot_options_bot_bot_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0003_tarotcard_tarotdeck_alter_parseproduct_options_and_more_squashed_0004_alter_tarotcarditem_unique_together_and_more'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='bot',\n            options={'verbose_name': 'Бот', 'verbose_name_plural': 'Боты'},\n        ),\n        migrations.AddField(",
        "detail": "app.tg_bot.migrations.0005_alter_bot_options_bot_bot_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0006_tarotcard_is_major",
        "description": "app.tg_bot.migrations.0006_tarotcard_is_major",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0005_alter_bot_options_bot_bot_type'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='tarotcard',\n            name='is_major',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "app.tg_bot.migrations.0006_tarotcard_is_major",
        "documentation": {}
    },
    {
        "label": "Bot",
        "kind": 6,
        "importPath": "app.tg_bot.models.base",
        "description": "app.tg_bot.models.base",
        "peekOfCode": "class Bot(models.Model):\n    # Типы ботов\n    BOT_TYPE_CHOICES = [\n        (\"ParserBot\", \"ParserBot\"),\n        (\"TarotBot\", \"TarotBot\"),\n    ]\n    name = models.CharField(max_length=100, verbose_name=\"Название бота\")\n    token = models.CharField(max_length=255, verbose_name=\"Токен\")\n    chat_id = models.CharField(max_length=50, verbose_name=\"Chat ID\")\n    bot_type = models.CharField(",
        "detail": "app.tg_bot.models.base",
        "documentation": {}
    },
    {
        "label": "TgUser",
        "kind": 6,
        "importPath": "app.tg_bot.models.base",
        "description": "app.tg_bot.models.base",
        "peekOfCode": "class TgUser(models.Model):\n    \"\"\"Модель для хранения данных о пользователе Telegram.\"\"\"\n    tg_id = models.BigIntegerField(unique=True, verbose_name=\"Telegram ID\")\n    username = models.CharField(\n        max_length=255, blank=True, null=True, verbose_name=\"Username\"\n    )\n    first_name = models.CharField(\n        max_length=255, blank=True, null=True, verbose_name=\"Имя\"\n    )\n    last_name = models.CharField(",
        "detail": "app.tg_bot.models.base",
        "documentation": {}
    },
    {
        "label": "ParseProduct",
        "kind": 6,
        "importPath": "app.tg_bot.models.parser",
        "description": "app.tg_bot.models.parser",
        "peekOfCode": "class ParseProduct(models.Model):\n    \"\"\"Модель для хранения данных о продукте.\"\"\"\n    PRODUCT_TYPE_CHOICES = [\n        (\"ozon\", \"Ozon\"),\n        (\"wb\", \"Wildberries\"),\n    ]\n    product_id = models.CharField(max_length=255, verbose_name=\"ID товара\")\n    photo_id = models.CharField(max_length=255, verbose_name=\"ID фото в Telegram\")\n    caption = models.TextField(verbose_name=\"Подпись к фото\")\n    product_type = models.CharField(",
        "detail": "app.tg_bot.models.parser",
        "documentation": {}
    },
    {
        "label": "TgUserProduct",
        "kind": 6,
        "importPath": "app.tg_bot.models.parser",
        "description": "app.tg_bot.models.parser",
        "peekOfCode": "class TgUserProduct(models.Model):\n    \"\"\"Модель для связи пользователя с продуктом.\"\"\"\n    tg_user = models.ForeignKey(\n        TgUser,\n        on_delete=models.CASCADE,\n        related_name=\"user_products\",\n        verbose_name=\"Пользователь\",\n    )\n    product = models.ForeignKey(\n        ParseProduct,",
        "detail": "app.tg_bot.models.parser",
        "documentation": {}
    },
    {
        "label": "bot_prefix",
        "kind": 5,
        "importPath": "app.tg_bot.models.parser",
        "description": "app.tg_bot.models.parser",
        "peekOfCode": "bot_prefix = \"Card Parser\"\nclass ParseProduct(models.Model):\n    \"\"\"Модель для хранения данных о продукте.\"\"\"\n    PRODUCT_TYPE_CHOICES = [\n        (\"ozon\", \"Ozon\"),\n        (\"wb\", \"Wildberries\"),\n    ]\n    product_id = models.CharField(max_length=255, verbose_name=\"ID товара\")\n    photo_id = models.CharField(max_length=255, verbose_name=\"ID фото в Telegram\")\n    caption = models.TextField(verbose_name=\"Подпись к фото\")",
        "detail": "app.tg_bot.models.parser",
        "documentation": {}
    },
    {
        "label": "TarotCard",
        "kind": 6,
        "importPath": "app.tg_bot.models.tarot",
        "description": "app.tg_bot.models.tarot",
        "peekOfCode": "class TarotCard(models.Model):\n    card_id = models.CharField(max_length=10, unique=True, verbose_name=\"ID карты\")\n    name = models.CharField(max_length=255, verbose_name=\"Название карты\")\n    meaning = models.TextField(verbose_name=\"Основное значение\")\n    meaning_url = models.URLField(\n        verbose_name=\"Ссылка на значение\", blank=True, null=True\n    )\n    is_major = models.BooleanField(default=False)\n    def __str__(self):\n        return self.name",
        "detail": "app.tg_bot.models.tarot",
        "documentation": {}
    },
    {
        "label": "ExtendedMeaning",
        "kind": 6,
        "importPath": "app.tg_bot.models.tarot",
        "description": "app.tg_bot.models.tarot",
        "peekOfCode": "class ExtendedMeaning(models.Model):\n    tarot_card = models.ForeignKey(\n        TarotCard, on_delete=models.CASCADE, related_name=\"extended_meanings\"\n    )\n    category = models.CharField(max_length=50, verbose_name=\"Категория\")\n    text = models.TextField(verbose_name=\"Текст значения\")\n    def __str__(self):\n        return f\"{self.tarot_card.name} - {self.category}\"\n    class Meta:\n        verbose_name = f\"{bot_prefix}: Расширенное толкование\"",
        "detail": "app.tg_bot.models.tarot",
        "documentation": {}
    },
    {
        "label": "TarotDeck",
        "kind": 6,
        "importPath": "app.tg_bot.models.tarot",
        "description": "app.tg_bot.models.tarot",
        "peekOfCode": "class TarotDeck(models.Model):\n    \"\"\"\n    Модель для хранения информации о колоде Таро.\n    \"\"\"\n    name = models.CharField(max_length=255, unique=True, verbose_name=\"Название колоды\")\n    link = models.CharField(\n        max_length=255,\n        null=True,\n        blank=True,\n        default=None,",
        "detail": "app.tg_bot.models.tarot",
        "documentation": {}
    },
    {
        "label": "TarotCardItem",
        "kind": 6,
        "importPath": "app.tg_bot.models.tarot",
        "description": "app.tg_bot.models.tarot",
        "peekOfCode": "class TarotCardItem(models.Model):\n    \"\"\"\n    Модель для хранения информации о карте в колоде.\n    \"\"\"\n    deck = models.ForeignKey(\n        TarotDeck, on_delete=models.CASCADE, related_name=\"cards\", verbose_name=\"Колода\"\n    )\n    tarot_card = models.ForeignKey(\n        \"TarotCard\",\n        on_delete=models.CASCADE,",
        "detail": "app.tg_bot.models.tarot",
        "documentation": {}
    },
    {
        "label": "bot_prefix",
        "kind": 5,
        "importPath": "app.tg_bot.models.tarot",
        "description": "app.tg_bot.models.tarot",
        "peekOfCode": "bot_prefix = \"Tarot\"\nclass TarotCard(models.Model):\n    card_id = models.CharField(max_length=10, unique=True, verbose_name=\"ID карты\")\n    name = models.CharField(max_length=255, verbose_name=\"Название карты\")\n    meaning = models.TextField(verbose_name=\"Основное значение\")\n    meaning_url = models.URLField(\n        verbose_name=\"Ссылка на значение\", blank=True, null=True\n    )\n    is_major = models.BooleanField(default=False)\n    def __str__(self):",
        "detail": "app.tg_bot.models.tarot",
        "documentation": {}
    },
    {
        "label": "BotAdmin",
        "kind": 6,
        "importPath": "app.tg_bot.admin",
        "description": "app.tg_bot.admin",
        "peekOfCode": "class BotAdmin(admin.ModelAdmin):\n    list_display = (\"name\", \"token\", \"chat_id\", \"bot_type\", \"created_at\", \"updated_at\")\n    search_fields = (\"name\", \"token\", \"chat_id\")\n    list_filter = (\"bot_type\", \"created_at\")\n@admin.register(ParseProduct)\nclass ParseProductAdmin(admin.ModelAdmin):\n    list_display = (\"product_id\", \"caption\", \"product_type\", \"created_at\")\n    list_filter = (\"product_type\",)\n    search_fields = (\"caption\", \"product_id\")\n@admin.register(TgUserProduct)",
        "detail": "app.tg_bot.admin",
        "documentation": {}
    },
    {
        "label": "ParseProductAdmin",
        "kind": 6,
        "importPath": "app.tg_bot.admin",
        "description": "app.tg_bot.admin",
        "peekOfCode": "class ParseProductAdmin(admin.ModelAdmin):\n    list_display = (\"product_id\", \"caption\", \"product_type\", \"created_at\")\n    list_filter = (\"product_type\",)\n    search_fields = (\"caption\", \"product_id\")\n@admin.register(TgUserProduct)\nclass TgUserProductAdmin(admin.ModelAdmin):\n    list_display = (\"tg_user\", \"product\", \"sent_at\")\n    list_filter = (\"sent_at\",)\n    search_fields = (\"tg_user__username\", \"product__caption\")\n@admin.register(TarotCard)",
        "detail": "app.tg_bot.admin",
        "documentation": {}
    },
    {
        "label": "TgUserProductAdmin",
        "kind": 6,
        "importPath": "app.tg_bot.admin",
        "description": "app.tg_bot.admin",
        "peekOfCode": "class TgUserProductAdmin(admin.ModelAdmin):\n    list_display = (\"tg_user\", \"product\", \"sent_at\")\n    list_filter = (\"sent_at\",)\n    search_fields = (\"tg_user__username\", \"product__caption\")\n@admin.register(TarotCard)\nclass TarotCardAdmin(admin.ModelAdmin):\n    list_display = (\"card_id\", \"name\", \"is_major\")  # Добавлено card_id для наглядности\n    list_editable = (\"is_major\",)  # Разрешаем редактирование прямо в списке\n    list_filter = (\"is_major\",)  # Добавляем фильтр по этому полю\n    search_fields = (\"name\", \"card_id\")  # Поиск по названию и ID карты",
        "detail": "app.tg_bot.admin",
        "documentation": {}
    },
    {
        "label": "TarotCardAdmin",
        "kind": 6,
        "importPath": "app.tg_bot.admin",
        "description": "app.tg_bot.admin",
        "peekOfCode": "class TarotCardAdmin(admin.ModelAdmin):\n    list_display = (\"card_id\", \"name\", \"is_major\")  # Добавлено card_id для наглядности\n    list_editable = (\"is_major\",)  # Разрешаем редактирование прямо в списке\n    list_filter = (\"is_major\",)  # Добавляем фильтр по этому полю\n    search_fields = (\"name\", \"card_id\")  # Поиск по названию и ID карты\n@admin.register(ExtendedMeaning)\nclass ExtendedMeaningAdmin(admin.ModelAdmin):\n    list_display = (\"tarot_card\", \"category\", \"text\")\n@admin.register(TarotDeck)\nclass TarotDeckAdmin(admin.ModelAdmin):",
        "detail": "app.tg_bot.admin",
        "documentation": {}
    },
    {
        "label": "ExtendedMeaningAdmin",
        "kind": 6,
        "importPath": "app.tg_bot.admin",
        "description": "app.tg_bot.admin",
        "peekOfCode": "class ExtendedMeaningAdmin(admin.ModelAdmin):\n    list_display = (\"tarot_card\", \"category\", \"text\")\n@admin.register(TarotDeck)\nclass TarotDeckAdmin(admin.ModelAdmin):\n    \"\"\"\n    Админка для модели TarotDeck.\n    \"\"\"\n    list_display = (\"name\", \"link\")  # Поля, отображаемые в списке\n    search_fields = (\"name\",)  # Поля для поиска\n    list_filter = (\"name\",)  # Фильтры в правой панели",
        "detail": "app.tg_bot.admin",
        "documentation": {}
    },
    {
        "label": "TarotDeckAdmin",
        "kind": 6,
        "importPath": "app.tg_bot.admin",
        "description": "app.tg_bot.admin",
        "peekOfCode": "class TarotDeckAdmin(admin.ModelAdmin):\n    \"\"\"\n    Админка для модели TarotDeck.\n    \"\"\"\n    list_display = (\"name\", \"link\")  # Поля, отображаемые в списке\n    search_fields = (\"name\",)  # Поля для поиска\n    list_filter = (\"name\",)  # Фильтры в правой панели\n@admin.register(TarotCardItem)\nclass CardAdmin(admin.ModelAdmin):\n    \"\"\"",
        "detail": "app.tg_bot.admin",
        "documentation": {}
    },
    {
        "label": "CardAdmin",
        "kind": 6,
        "importPath": "app.tg_bot.admin",
        "description": "app.tg_bot.admin",
        "peekOfCode": "class CardAdmin(admin.ModelAdmin):\n    \"\"\"\n    Админка для модели Card.\n    \"\"\"\n    list_display = (\"deck\", \"tarot_card\", \"img_id\")  # Поля, отображаемые в списке\n    search_fields = (\"deck__name\", \"tarot_card__name\")  # Поля для поиска\n    list_filter = (\"deck\", \"tarot_card\")  # Фильтры в правой панели",
        "detail": "app.tg_bot.admin",
        "documentation": {}
    },
    {
        "label": "TgBotConfig",
        "kind": 6,
        "importPath": "app.tg_bot.apps",
        "description": "app.tg_bot.apps",
        "peekOfCode": "class TgBotConfig(AppConfig):\n    name = 'tg_bot'\n    _task_started = False\n    def ready(self):\n        if self._task_started:\n            logger.info(\"Задача уже была запущена. Пропускаем.\")\n            return\n        # Если запущен runserver, проверяем, что это основной процесс\n        if 'runserver' in sys.argv:\n            # Проверяем RUN_MAIN для основного процесса",
        "detail": "app.tg_bot.apps",
        "documentation": {}
    },
    {
        "label": "BotSerializer",
        "kind": 6,
        "importPath": "app.tg_bot.serializers",
        "description": "app.tg_bot.serializers",
        "peekOfCode": "class BotSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Bot\n        fields = \"__all__\"",
        "detail": "app.tg_bot.serializers",
        "documentation": {}
    },
    {
        "label": "process_bot",
        "kind": 2,
        "importPath": "app.tg_bot.tasks",
        "description": "app.tg_bot.tasks",
        "peekOfCode": "def process_bot(self, token, handlersClass):\n    lock_key = f\"bot_processing_lock_{token}\"\n    def cleanup_on_exit(signum, frame):\n        logger.info(\"Завершаем работу контейнера и очищаем ресурсы...\")\n        # Выполним нужные очистки, например, удалим блокировку Redis\n        redis_client.delete(lock_key)\n    # Попробуем установить блокировку, если она уже установлена — выходим\n    if not redis_client.setnx(lock_key, \"locked\"):\n        logger.info(f\"Задача для бота с токеном {token} уже выполняется. Пропускаем.\")\n        return",
        "detail": "app.tg_bot.tasks",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "kind": 5,
        "importPath": "app.tg_bot.tasks",
        "description": "app.tg_bot.tasks",
        "peekOfCode": "redis_client = redis.StrictRedis(\n    host=os.getenv(\"REDIS_HOST\"), port=os.getenv(\"REDIS_PORT\"), db=2\n)\n# Асинхронная обработка бота\nasync def run_bot(token, handlersClass):\n    # Динамически создаем класс по имени\n    bot_class = globals().get(handlersClass)\n    if not bot_class:\n        logger.error(f\"Класс {handlersClass} не найден\")\n        return",
        "detail": "app.tg_bot.tasks",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.tg_bot.urls",
        "description": "app.tg_bot.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r\"bots\", BotViewSet)\nurlpatterns = [\n    path(\"\", include(router.urls)),  \n    path(\"webhook/<str:token>/\", webhook, name=\"webhook\"),  # Маршрут для вебхука с токеном\n]",
        "detail": "app.tg_bot.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.tg_bot.urls",
        "description": "app.tg_bot.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", include(router.urls)),  \n    path(\"webhook/<str:token>/\", webhook, name=\"webhook\"),  # Маршрут для вебхука с токеном\n]",
        "detail": "app.tg_bot.urls",
        "documentation": {}
    },
    {
        "label": "BotViewSet",
        "kind": 6,
        "importPath": "app.tg_bot.views",
        "description": "app.tg_bot.views",
        "peekOfCode": "class BotViewSet(viewsets.ModelViewSet):\n    queryset = Bot.objects.all()\n    serializer_class = BotSerializer\n# Декоратор для обработки webhook без CSRF-проверки\n@csrf_exempt\ndef webhook(request, token):\n    if request.method == \"POST\":\n        # Получаем JSON строку из тела запроса\n        json_str = request.body.decode(\"UTF-8\")\n        # Проверка, что это сообщение (опционально)",
        "detail": "app.tg_bot.views",
        "documentation": {}
    },
    {
        "label": "webhook",
        "kind": 2,
        "importPath": "app.tg_bot.views",
        "description": "app.tg_bot.views",
        "peekOfCode": "def webhook(request, token):\n    if request.method == \"POST\":\n        # Получаем JSON строку из тела запроса\n        json_str = request.body.decode(\"UTF-8\")\n        # Проверка, что это сообщение (опционально)\n        try:\n            # Вы можете просто поместить строку JSON в очередь\n            redis_client.rpush(\"bot_messages_queue\", json_str)\n            logger.info(f\"Сообщение добавлено в очередь: {json_str[0:50]}\")\n            return JsonResponse({\"status\": \"ok\"})",
        "detail": "app.tg_bot.views",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "kind": 5,
        "importPath": "app.tg_bot.views",
        "description": "app.tg_bot.views",
        "peekOfCode": "redis_client = redis.StrictRedis(\n    host=os.getenv(\"REDIS_HOST\"), port=os.getenv(\"REDIS_PORT\"), db=2\n)\nclass BotViewSet(viewsets.ModelViewSet):\n    queryset = Bot.objects.all()\n    serializer_class = BotSerializer\n# Декоратор для обработки webhook без CSRF-проверки\n@csrf_exempt\ndef webhook(request, token):\n    if request.method == \"POST\":",
        "detail": "app.tg_bot.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app.manage",
        "description": "app.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'server.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "app.manage",
        "documentation": {}
    }
]