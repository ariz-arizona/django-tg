[
    {
        "label": "__future__",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "__future__",
        "description": "__future__",
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "Update",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "InputMediaPhoto",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "Update",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "InputMediaPhoto",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardButton",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "InlineKeyboardMarkup",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "Update",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "Update",
        "importPath": "telegram",
        "description": "telegram",
        "isExtraImport": true,
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "CommandHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "MessageHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CallbackContext",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CommandHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "MessageHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CallbackQueryHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CallbackContext",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CommandHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CallbackContext",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "ApplicationBuilder",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "CommandHandler",
        "importPath": "telegram.ext",
        "description": "telegram.ext",
        "isExtraImport": true,
        "detail": "telegram.ext",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "server.logger",
        "description": "server.logger",
        "isExtraImport": true,
        "detail": "server.logger",
        "documentation": {}
    },
    {
        "label": "AbstractBot",
        "importPath": "tg_bot.bot.abstract",
        "description": "tg_bot.bot.abstract",
        "isExtraImport": true,
        "detail": "tg_bot.bot.abstract",
        "documentation": {}
    },
    {
        "label": "AbstractBot",
        "importPath": "tg_bot.bot.abstract",
        "description": "tg_bot.bot.abstract",
        "isExtraImport": true,
        "detail": "tg_bot.bot.abstract",
        "documentation": {}
    },
    {
        "label": "TgUser",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "TgUser",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "TgUser",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "TgUser",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "TgUser",
        "importPath": "tg_bot.models",
        "description": "tg_bot.models",
        "isExtraImport": true,
        "detail": "tg_bot.models",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "cardparser.utils",
        "description": "cardparser.utils",
        "isExtraImport": true,
        "detail": "cardparser.utils",
        "documentation": {}
    },
    {
        "label": "Se",
        "importPath": "cardparser.services.wb_link_builder",
        "description": "cardparser.services.wb_link_builder",
        "isExtraImport": true,
        "detail": "cardparser.services.wb_link_builder",
        "documentation": {}
    },
    {
        "label": "get_popular_products",
        "importPath": "cardparser.services.marketing_queryset",
        "description": "cardparser.services.marketing_queryset",
        "isExtraImport": true,
        "detail": "cardparser.services.marketing_queryset",
        "documentation": {}
    },
    {
        "label": "ParseProduct",
        "importPath": "cardparser.models",
        "description": "cardparser.models",
        "isExtraImport": true,
        "detail": "cardparser.models",
        "documentation": {}
    },
    {
        "label": "TgUserProduct",
        "importPath": "cardparser.models",
        "description": "cardparser.models",
        "isExtraImport": true,
        "detail": "cardparser.models",
        "documentation": {}
    },
    {
        "label": "Brand",
        "importPath": "cardparser.models",
        "description": "cardparser.models",
        "isExtraImport": true,
        "detail": "cardparser.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "cardparser.models",
        "description": "cardparser.models",
        "isExtraImport": true,
        "detail": "cardparser.models",
        "documentation": {}
    },
    {
        "label": "ProductImage",
        "importPath": "cardparser.models",
        "description": "cardparser.models",
        "isExtraImport": true,
        "detail": "cardparser.models",
        "documentation": {}
    },
    {
        "label": "BotSettings",
        "importPath": "cardparser.models",
        "description": "cardparser.models",
        "isExtraImport": true,
        "detail": "cardparser.models",
        "documentation": {}
    },
    {
        "label": "EventCaption",
        "importPath": "cardparser.models",
        "description": "cardparser.models",
        "isExtraImport": true,
        "detail": "cardparser.models",
        "documentation": {}
    },
    {
        "label": "TgUserProduct",
        "importPath": "cardparser.models",
        "description": "cardparser.models",
        "isExtraImport": true,
        "detail": "cardparser.models",
        "documentation": {}
    },
    {
        "label": "ParseProduct",
        "importPath": "cardparser.models",
        "description": "cardparser.models",
        "isExtraImport": true,
        "detail": "cardparser.models",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "RunSQL",
        "importPath": "django.db.migrations.operations.special",
        "description": "django.db.migrations.operations.special",
        "isExtraImport": true,
        "detail": "django.db.migrations.operations.special",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "tg_bot.models.base",
        "description": "tg_bot.models.base",
        "isExtraImport": true,
        "detail": "tg_bot.models.base",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "TarotDeck",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "TarotCardItem",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "TarotCard",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "ExtendedMeaning",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "TarotUserReading",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "OraculumDeck",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "OraculumItem",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "Rune",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "OraculumItem",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "OraculumDeck",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "Rune",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "TarotCard",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "ExtendedMeaning",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "TarotMeaningCategory",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "TarotCard",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "TarotDeck",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "TarotCardItem",
        "importPath": "tarot.models",
        "description": "tarot.models",
        "isExtraImport": true,
        "detail": "tarot.models",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "ParserBot",
        "importPath": "cardparser.bot.parser",
        "description": "cardparser.bot.parser",
        "isExtraImport": true,
        "detail": "cardparser.bot.parser",
        "documentation": {}
    },
    {
        "label": "TarotBot",
        "importPath": "tarot.bot.tarot",
        "description": "tarot.bot.tarot",
        "isExtraImport": true,
        "detail": "tarot.bot.tarot",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "ParserBot",
        "kind": 6,
        "importPath": "app.cardparser.bot.parser",
        "description": "app.cardparser.bot.parser",
        "peekOfCode": "class ParserBot(AbstractBot):\n    def __init__(self):\n        self.handlers = self.get_handlers()\n    def get_handlers(self):\n        return [\n            MessageHandler(\n                (\n                    (filters.TEXT & filters.Regex(combined_regexp))\n                    | (filters.CAPTION & filters.CaptionRegex(combined_regexp))\n                )",
        "detail": "app.cardparser.bot.parser",
        "documentation": {}
    },
    {
        "label": "wb_regexp",
        "kind": 5,
        "importPath": "app.cardparser.bot.parser",
        "description": "app.cardparser.bot.parser",
        "peekOfCode": "wb_regexp = r\"wildberries\\.ru\\/(catalog\\/(\\d*)|product\\?card=(\\d*))\"\nozon_regexp = r\"ozon\\.ru\\/(t\\/[^\\s]*)\\/?\"\ncombined_regexp = f\"({wb_regexp}|{ozon_regexp})\"\nclass ParserBot(AbstractBot):\n    def __init__(self):\n        self.handlers = self.get_handlers()\n    def get_handlers(self):\n        return [\n            MessageHandler(\n                (",
        "detail": "app.cardparser.bot.parser",
        "documentation": {}
    },
    {
        "label": "ozon_regexp",
        "kind": 5,
        "importPath": "app.cardparser.bot.parser",
        "description": "app.cardparser.bot.parser",
        "peekOfCode": "ozon_regexp = r\"ozon\\.ru\\/(t\\/[^\\s]*)\\/?\"\ncombined_regexp = f\"({wb_regexp}|{ozon_regexp})\"\nclass ParserBot(AbstractBot):\n    def __init__(self):\n        self.handlers = self.get_handlers()\n    def get_handlers(self):\n        return [\n            MessageHandler(\n                (\n                    (filters.TEXT & filters.Regex(combined_regexp))",
        "detail": "app.cardparser.bot.parser",
        "documentation": {}
    },
    {
        "label": "combined_regexp",
        "kind": 5,
        "importPath": "app.cardparser.bot.parser",
        "description": "app.cardparser.bot.parser",
        "peekOfCode": "combined_regexp = f\"({wb_regexp}|{ozon_regexp})\"\nclass ParserBot(AbstractBot):\n    def __init__(self):\n        self.handlers = self.get_handlers()\n    def get_handlers(self):\n        return [\n            MessageHandler(\n                (\n                    (filters.TEXT & filters.Regex(combined_regexp))\n                    | (filters.CAPTION & filters.CaptionRegex(combined_regexp))",
        "detail": "app.cardparser.bot.parser",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.cardparser.migrations.0001_initial",
        "description": "app.cardparser.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('tg_bot', '0030_parseproduct_name'),  # Убедись, что выполнена\n    ]\n    operations = [\n        # Шаг 1: Физически переименовываем таблицы в БД\n        RunSQL(\"ALTER TABLE tg_bot_brand RENAME TO cardparser_brand;\"),\n        RunSQL(\"ALTER TABLE tg_bot_category RENAME TO cardparser_category;\"),\n        RunSQL(\"ALTER TABLE tg_bot_parseproduct RENAME TO cardparser_parseproduct;\"),",
        "detail": "app.cardparser.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.cardparser.migrations.0002_botsettings",
        "description": "app.cardparser.migrations.0002_botsettings",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('cardparser', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='BotSettings',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('active', models.BooleanField(default=False, help_text='Только одна запись в системе может быть активной.', verbose_name='Активные настройки')),",
        "detail": "app.cardparser.migrations.0002_botsettings",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.cardparser.migrations.0003_eventcaption",
        "description": "app.cardparser.migrations.0003_eventcaption",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('cardparser', '0002_botsettings'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='EventCaption',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('event_type', models.CharField(choices=[('popular', 'Топ популярных'), ('default', 'По умолчанию')], max_length=20, verbose_name='Тип события')),",
        "detail": "app.cardparser.migrations.0003_eventcaption",
        "documentation": {}
    },
    {
        "label": "get_popular_products",
        "kind": 2,
        "importPath": "app.cardparser.services.marketing_queryset",
        "description": "app.cardparser.services.marketing_queryset",
        "peekOfCode": "def get_popular_products(\n    hours: int = 24,\n    days: int = 0,\n    limit: int = 10\n):\n    \"\"\"\n    Возвращает топ-товаров за период:\n    - Сортирует по количеству запросов (desc)\n    - При равном количестве — по времени последнего запроса (desc)\n    Реализовано через SQL (annotate), чтобы не грузить Python.",
        "detail": "app.cardparser.services.marketing_queryset",
        "documentation": {}
    },
    {
        "label": "Se",
        "kind": 6,
        "importPath": "app.cardparser.services.wb_link_builder",
        "description": "app.cardparser.services.wb_link_builder",
        "peekOfCode": "class Se:\n    @staticmethod\n    def vol_host_v2(e):\n        t = e // 100000\n        if 0 <= t <= 143:\n            r = \"01\"\n        elif t <= 287:\n            r = \"02\"\n        elif t <= 431:\n            r = \"03\"",
        "detail": "app.cardparser.services.wb_link_builder",
        "documentation": {}
    },
    {
        "label": "TgUserProductAdmin",
        "kind": 6,
        "importPath": "app.cardparser.admin",
        "description": "app.cardparser.admin",
        "peekOfCode": "class TgUserProductAdmin(admin.ModelAdmin):\n    list_display = (\"tg_user\", \"product\", \"sent_at\")\n    list_filter = (\"sent_at\",)\n    search_fields = (\"tg_user__username\", \"product__caption\")\n# === Inline: Изображения в ParseProduct ===\nclass ProductImageInline(admin.TabularInline):\n    model = ProductImage\n    extra = 0\n    readonly_fields = (\"image_type\", \"file_id\", \"url\", \"created_at\")\n    fields = (\"image_type\", \"file_id\", \"url\", \"created_at\")",
        "detail": "app.cardparser.admin",
        "documentation": {}
    },
    {
        "label": "ProductImageInline",
        "kind": 6,
        "importPath": "app.cardparser.admin",
        "description": "app.cardparser.admin",
        "peekOfCode": "class ProductImageInline(admin.TabularInline):\n    model = ProductImage\n    extra = 0\n    readonly_fields = (\"image_type\", \"file_id\", \"url\", \"created_at\")\n    fields = (\"image_type\", \"file_id\", \"url\", \"created_at\")\n    can_delete = False\n    show_change_link = True\n# === Админка: TgUserProduct (Inline) ===\nclass TgUserProductInline(admin.TabularInline):\n    model = TgUserProduct",
        "detail": "app.cardparser.admin",
        "documentation": {}
    },
    {
        "label": "TgUserProductInline",
        "kind": 6,
        "importPath": "app.cardparser.admin",
        "description": "app.cardparser.admin",
        "peekOfCode": "class TgUserProductInline(admin.TabularInline):\n    model = TgUserProduct\n    extra = 0\n    readonly_fields = (\"sent_at\", \"tg_user\")\n    fields = (\"tg_user\", \"sent_at\")\n    can_delete = False  # чтобы случайно не удалили историю\n    show_change_link = True\n# === Админка: ParseProduct ===\n@admin.register(ParseProduct)\nclass ParseProductAdmin(admin.ModelAdmin):",
        "detail": "app.cardparser.admin",
        "documentation": {}
    },
    {
        "label": "ParseProductAdmin",
        "kind": 6,
        "importPath": "app.cardparser.admin",
        "description": "app.cardparser.admin",
        "peekOfCode": "class ParseProductAdmin(admin.ModelAdmin):\n    list_display = (\n        \"product_id\",\n        \"product_type\",\n        \"name\",\n        \"brand__name\",\n        \"category__name\",\n        \"created_at\",\n        \"updated_at\",\n    )",
        "detail": "app.cardparser.admin",
        "documentation": {}
    },
    {
        "label": "ProductImageAdmin",
        "kind": 6,
        "importPath": "app.cardparser.admin",
        "description": "app.cardparser.admin",
        "peekOfCode": "class ProductImageAdmin(admin.ModelAdmin):\n    list_display = (\n        \"product\",\n        \"image_type\",\n        \"file_id_preview\",\n        \"url_preview\",\n        \"created_at\",\n    )\n    list_filter = (\"image_type\", \"created_at\")\n    search_fields = (\"file_id\", \"url\", \"product__product_id\")",
        "detail": "app.cardparser.admin",
        "documentation": {}
    },
    {
        "label": "BrandAdmin",
        "kind": 6,
        "importPath": "app.cardparser.admin",
        "description": "app.cardparser.admin",
        "peekOfCode": "class BrandAdmin(admin.ModelAdmin):\n    list_display = (\n        \"name\",\n        \"brand_id\",\n        \"product_type\",\n        \"products_count\",\n        \"created_at\",\n    )\n    list_filter = (\"product_type\", \"created_at\")\n    search_fields = (\"name\", \"brand_id\")",
        "detail": "app.cardparser.admin",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "app.cardparser.admin",
        "description": "app.cardparser.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    list_display = (\n        \"name\",\n        \"subject_id\",\n        \"product_type\",\n        \"products_count\",\n        \"created_at\",\n    )\n    list_filter = (\"product_type\", \"created_at\")\n    search_fields = (\"name\", \"subject_id\")",
        "detail": "app.cardparser.admin",
        "documentation": {}
    },
    {
        "label": "BotSettingsAdmin",
        "kind": 6,
        "importPath": "app.cardparser.admin",
        "description": "app.cardparser.admin",
        "peekOfCode": "class BotSettingsAdmin(admin.ModelAdmin):\n    # Поля, отображаемые в списке\n    list_display = [\n        \"active_status\",\n        \"marketing_group_id\",\n        \"picture_chat_id\",\n        \"parser_urls\",\n        \"updated_at\",\n    ]\n    # Только для чтения в форме",
        "detail": "app.cardparser.admin",
        "documentation": {}
    },
    {
        "label": "EventCaptionAdmin",
        "kind": 6,
        "importPath": "app.cardparser.admin",
        "description": "app.cardparser.admin",
        "peekOfCode": "class EventCaptionAdmin(admin.ModelAdmin):\n    # Поля, которые видно в списке\n    list_display = (\n        'get_event_type_display_name',\n        'short_text',\n        'short_caption',\n        'is_active',\n        'updated_at'\n    )\n    # Поля, которые можно редактировать прямо в списке",
        "detail": "app.cardparser.admin",
        "documentation": {}
    },
    {
        "label": "CardparserConfig",
        "kind": 6,
        "importPath": "app.cardparser.apps",
        "description": "app.cardparser.apps",
        "peekOfCode": "class CardparserConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'cardparser'",
        "detail": "app.cardparser.apps",
        "documentation": {}
    },
    {
        "label": "Brand",
        "kind": 6,
        "importPath": "app.cardparser.models",
        "description": "app.cardparser.models",
        "peekOfCode": "class Brand(models.Model):\n    \"\"\"Модель бренда с учётом принадлежности к платформе\"\"\"\n    name = models.CharField(max_length=255, verbose_name=\"Название бренда\")\n    brand_id = models.CharField(max_length=50, verbose_name=\"Внешний ID бренда\")\n    product_type = models.CharField(\n        max_length=10, choices=PRODUCT_TYPE_CHOICES, verbose_name=\"Тип площадки\"\n    )\n    created_at = models.DateTimeField(auto_now_add=True, verbose_name=\"Дата создания\")\n    class Meta:\n        verbose_name = f\"{bot_prefix}: Бренд\"",
        "detail": "app.cardparser.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "app.cardparser.models",
        "description": "app.cardparser.models",
        "peekOfCode": "class Category(models.Model):\n    \"\"\"Модель категории с привязкой к платформе\"\"\"\n    name = models.CharField(max_length=255, verbose_name=\"Название категории\")\n    subject_id = models.IntegerField(verbose_name=\"subjectId / category_id\")\n    product_type = models.CharField(\n        max_length=10, choices=PRODUCT_TYPE_CHOICES, verbose_name=\"Тип площадки\"\n    )\n    created_at = models.DateTimeField(auto_now_add=True, verbose_name=\"Дата создания\")\n    class Meta:\n        verbose_name = f\"{bot_prefix}: Категория\"",
        "detail": "app.cardparser.models",
        "documentation": {}
    },
    {
        "label": "ParseProduct",
        "kind": 6,
        "importPath": "app.cardparser.models",
        "description": "app.cardparser.models",
        "peekOfCode": "class ParseProduct(models.Model):\n    \"\"\"Модель для хранения данных о продукте.\"\"\"\n    product_id = models.CharField(max_length=255, verbose_name=\"ID товара\")\n    caption = models.TextField(verbose_name=\"Подпись к фото\")\n    name = models.CharField(\n        max_length=255,\n        blank=True,\n        null=True,\n        verbose_name=\"Название товара\",\n        help_text=\"Официальное название товара (опционально)\"",
        "detail": "app.cardparser.models",
        "documentation": {}
    },
    {
        "label": "ProductImage",
        "kind": 6,
        "importPath": "app.cardparser.models",
        "description": "app.cardparser.models",
        "peekOfCode": "class ProductImage(models.Model):\n    \"\"\"Модель для хранения изображений товара (Telegram file_id или прямая ссылка)\"\"\"\n    IMAGE_TYPE_CHOICES = [\n        (\"telegram\", \"Telegram file_id\"),\n        (\"link\", \"Прямая ссылка\"),\n    ]\n    image_type = models.CharField(\n        max_length=10, choices=IMAGE_TYPE_CHOICES, verbose_name=\"Тип изображения\"\n    )\n    # Один из двух будет заполнен",
        "detail": "app.cardparser.models",
        "documentation": {}
    },
    {
        "label": "TgUserProduct",
        "kind": 6,
        "importPath": "app.cardparser.models",
        "description": "app.cardparser.models",
        "peekOfCode": "class TgUserProduct(models.Model):\n    \"\"\"Модель для связи пользователя с продуктом.\"\"\"\n    tg_user = models.ForeignKey(\n        TgUser,\n        on_delete=models.CASCADE,\n        related_name=\"user_products\",\n        verbose_name=\"Пользователь\",\n    )\n    product = models.ForeignKey(\n        ParseProduct,",
        "detail": "app.cardparser.models",
        "documentation": {}
    },
    {
        "label": "BotSettings",
        "kind": 6,
        "importPath": "app.cardparser.models",
        "description": "app.cardparser.models",
        "peekOfCode": "class BotSettings(models.Model):\n    \"\"\"\n    Глобальные настройки бота. Только одна запись может быть активной.\n    Ограничение enforced на уровне базы данных.\n    \"\"\"\n    active = models.BooleanField(\n        default=False,\n        verbose_name=\"Активные настройки\",\n        help_text=\"Только одна запись в системе может быть активной.\"\n    )",
        "detail": "app.cardparser.models",
        "documentation": {}
    },
    {
        "label": "EventCaption",
        "kind": 6,
        "importPath": "app.cardparser.models",
        "description": "app.cardparser.models",
        "peekOfCode": "class EventCaption(models.Model):\n    class EventType(models.TextChoices):\n        POPULAR = 'popular', 'Топ популярных'\n        DEFAULT = 'default', 'По умолчанию'\n    event_type = models.CharField(\n        max_length=20,\n        choices=EventType.choices,\n        verbose_name=\"Тип события\"\n    )\n    text = models.TextField(",
        "detail": "app.cardparser.models",
        "documentation": {}
    },
    {
        "label": "bot_prefix",
        "kind": 5,
        "importPath": "app.cardparser.models",
        "description": "app.cardparser.models",
        "peekOfCode": "bot_prefix = \"Card Parser\"\nPRODUCT_TYPE_CHOICES = [\n    (\"ozon\", \"Ozon\"),\n    (\"wb\", \"Wildberries\"),\n]\nclass Brand(models.Model):\n    \"\"\"Модель бренда с учётом принадлежности к платформе\"\"\"\n    name = models.CharField(max_length=255, verbose_name=\"Название бренда\")\n    brand_id = models.CharField(max_length=50, verbose_name=\"Внешний ID бренда\")\n    product_type = models.CharField(",
        "detail": "app.cardparser.models",
        "documentation": {}
    },
    {
        "label": "PRODUCT_TYPE_CHOICES",
        "kind": 5,
        "importPath": "app.cardparser.models",
        "description": "app.cardparser.models",
        "peekOfCode": "PRODUCT_TYPE_CHOICES = [\n    (\"ozon\", \"Ozon\"),\n    (\"wb\", \"Wildberries\"),\n]\nclass Brand(models.Model):\n    \"\"\"Модель бренда с учётом принадлежности к платформе\"\"\"\n    name = models.CharField(max_length=255, verbose_name=\"Название бренда\")\n    brand_id = models.CharField(max_length=50, verbose_name=\"Внешний ID бренда\")\n    product_type = models.CharField(\n        max_length=10, choices=PRODUCT_TYPE_CHOICES, verbose_name=\"Тип площадки\"",
        "detail": "app.cardparser.models",
        "documentation": {}
    },
    {
        "label": "trigger_popular_command",
        "kind": 2,
        "importPath": "app.cardparser.tasks",
        "description": "app.cardparser.tasks",
        "peekOfCode": "def trigger_popular_command(bot_id: int):\n    \"\"\"\n    Задача: имитирует команду /popular от администратора.\n    Кладёт update в очередь — бот обрабатывает как обычное сообщение.\n    \"\"\"\n    # Токен бота из настроек\n    bot = Bot.objects.get(id=bot_id, bot_type=Bot.BOT_TYPE_CHOICES[0][0])\n    bot_token = bot.token\n    if not bot_token:\n        return",
        "detail": "app.cardparser.tasks",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "kind": 5,
        "importPath": "app.cardparser.tasks",
        "description": "app.cardparser.tasks",
        "peekOfCode": "redis_client = redis.StrictRedis(\n    host=os.getenv(\"REDIS_HOST\"), port=os.getenv(\"REDIS_PORT\"), db=2\n)\n@shared_task\ndef trigger_popular_command(bot_id: int):\n    \"\"\"\n    Задача: имитирует команду /popular от администратора.\n    Кладёт update в очередь — бот обрабатывает как обычное сообщение.\n    \"\"\"\n    # Токен бота из настроек",
        "detail": "app.cardparser.tasks",
        "documentation": {}
    },
    {
        "label": "render_template",
        "kind": 2,
        "importPath": "app.cardparser.utils",
        "description": "app.cardparser.utils",
        "peekOfCode": "def render_template(template: str, context: dict) -> str:\n    \"\"\"\n    Подставляет значения из словаря `context` в шаблон.\n    Заменяет все вхождения {key} на соответствующее значение.\n    Пример:\n        render_template(\"Привет, {name}!\", {\"name\": \"Анна\"}) → \"Привет, Анна!\"\n    :param template: строка с шаблоном (может быть None или пустой)\n    :param context: словарь с данными для подстановки\n    :return: обработанная строка\n    \"\"\"",
        "detail": "app.cardparser.utils",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "app.server.asgi",
        "description": "app.server.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "app.server.asgi",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.server.celery",
        "description": "app.server.celery",
        "peekOfCode": "app = Celery('server')\napp.config_from_object('django.conf:settings', namespace='CELERY')\napp.autodiscover_tasks()",
        "detail": "app.server.celery",
        "documentation": {}
    },
    {
        "label": "ColorFormatter",
        "kind": 6,
        "importPath": "app.server.logger",
        "description": "app.server.logger",
        "peekOfCode": "class ColorFormatter(logging.Formatter):\n    COLORS = {\n        'DEBUG': '\\033[92m',     # Green\n        'INFO': '\\033[94m',      # Blue\n        'WARNING': '\\033[93m',   # Yellow\n        'ERROR': '\\033[91m',     # Red\n        'CRITICAL': '\\033[1;91m' # Bold Red\n    }\n    RESET = '\\033[0m'\n    def format(self, record):",
        "detail": "app.server.logger",
        "documentation": {}
    },
    {
        "label": "formatter",
        "kind": 5,
        "importPath": "app.server.logger",
        "description": "app.server.logger",
        "peekOfCode": "formatter = ColorFormatter('%(asctime)s [%(levelname)s] || %(filename)s:%(lineno)d %(message)s')\nconsole_handler = logging.StreamHandler()\nconsole_handler.setFormatter(formatter)\nlogger = logging.getLogger('')\nlogger.setLevel(logging.INFO)\nlogger.addHandler(console_handler)",
        "detail": "app.server.logger",
        "documentation": {}
    },
    {
        "label": "console_handler",
        "kind": 5,
        "importPath": "app.server.logger",
        "description": "app.server.logger",
        "peekOfCode": "console_handler = logging.StreamHandler()\nconsole_handler.setFormatter(formatter)\nlogger = logging.getLogger('')\nlogger.setLevel(logging.INFO)\nlogger.addHandler(console_handler)",
        "detail": "app.server.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.server.logger",
        "description": "app.server.logger",
        "peekOfCode": "logger = logging.getLogger('')\nlogger.setLevel(logging.INFO)\nlogger.addHandler(console_handler)",
        "detail": "app.server.logger",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-vhpeg0+^tpklr65dn3l4(s*3xvn@2l7r(*w@lfyufj%yy7i0p=\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nTG_WEBHOOK_HOST_RAW = urlparse(os.environ.get(\"TG_WEBHOOK_HOST\")).netloc\nALLOWED_HOSTS = [\n    \"localhost\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-vhpeg0+^tpklr65dn3l4(s*3xvn@2l7r(*w@lfyufj%yy7i0p=\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nTG_WEBHOOK_HOST_RAW = urlparse(os.environ.get(\"TG_WEBHOOK_HOST\")).netloc\nALLOWED_HOSTS = [\n    \"localhost\",\n    TG_WEBHOOK_HOST_RAW,\n]\nTG_WEBHOOK_HOST = f\"https://{TG_WEBHOOK_HOST_RAW}\"\nPICTURE_CHAT = os.environ.get(\"PICTURE_CHAT\")",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "DEBUG = True\nTG_WEBHOOK_HOST_RAW = urlparse(os.environ.get(\"TG_WEBHOOK_HOST\")).netloc\nALLOWED_HOSTS = [\n    \"localhost\",\n    TG_WEBHOOK_HOST_RAW,\n]\nTG_WEBHOOK_HOST = f\"https://{TG_WEBHOOK_HOST_RAW}\"\nPICTURE_CHAT = os.environ.get(\"PICTURE_CHAT\")\nPARSER_URL = os.environ.get(\"PARSER\")\nTG_DEBUG = (os.environ.get(\"TG_DEBUG\") or \"false\").lower() == \"true\"",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "TG_WEBHOOK_HOST_RAW",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "TG_WEBHOOK_HOST_RAW = urlparse(os.environ.get(\"TG_WEBHOOK_HOST\")).netloc\nALLOWED_HOSTS = [\n    \"localhost\",\n    TG_WEBHOOK_HOST_RAW,\n]\nTG_WEBHOOK_HOST = f\"https://{TG_WEBHOOK_HOST_RAW}\"\nPICTURE_CHAT = os.environ.get(\"PICTURE_CHAT\")\nPARSER_URL = os.environ.get(\"PARSER\")\nTG_DEBUG = (os.environ.get(\"TG_DEBUG\") or \"false\").lower() == \"true\"\nCSRF_TRUSTED_ORIGINS = (TG_WEBHOOK_HOST,)",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\n    \"localhost\",\n    TG_WEBHOOK_HOST_RAW,\n]\nTG_WEBHOOK_HOST = f\"https://{TG_WEBHOOK_HOST_RAW}\"\nPICTURE_CHAT = os.environ.get(\"PICTURE_CHAT\")\nPARSER_URL = os.environ.get(\"PARSER\")\nTG_DEBUG = (os.environ.get(\"TG_DEBUG\") or \"false\").lower() == \"true\"\nCSRF_TRUSTED_ORIGINS = (TG_WEBHOOK_HOST,)\nCORS_ORIGIN_ALLOW_ALL = False",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "TG_WEBHOOK_HOST",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "TG_WEBHOOK_HOST = f\"https://{TG_WEBHOOK_HOST_RAW}\"\nPICTURE_CHAT = os.environ.get(\"PICTURE_CHAT\")\nPARSER_URL = os.environ.get(\"PARSER\")\nTG_DEBUG = (os.environ.get(\"TG_DEBUG\") or \"false\").lower() == \"true\"\nCSRF_TRUSTED_ORIGINS = (TG_WEBHOOK_HOST,)\nCORS_ORIGIN_ALLOW_ALL = False\nCORS_ORIGIN_WHITELIST = [\n    TG_WEBHOOK_HOST,\n]\n# Application definition",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "PICTURE_CHAT",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "PICTURE_CHAT = os.environ.get(\"PICTURE_CHAT\")\nPARSER_URL = os.environ.get(\"PARSER\")\nTG_DEBUG = (os.environ.get(\"TG_DEBUG\") or \"false\").lower() == \"true\"\nCSRF_TRUSTED_ORIGINS = (TG_WEBHOOK_HOST,)\nCORS_ORIGIN_ALLOW_ALL = False\nCORS_ORIGIN_WHITELIST = [\n    TG_WEBHOOK_HOST,\n]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "PARSER_URL",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "PARSER_URL = os.environ.get(\"PARSER\")\nTG_DEBUG = (os.environ.get(\"TG_DEBUG\") or \"false\").lower() == \"true\"\nCSRF_TRUSTED_ORIGINS = (TG_WEBHOOK_HOST,)\nCORS_ORIGIN_ALLOW_ALL = False\nCORS_ORIGIN_WHITELIST = [\n    TG_WEBHOOK_HOST,\n]\n# Application definition\nINSTALLED_APPS = [\n    \"admin_interface\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "TG_DEBUG",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "TG_DEBUG = (os.environ.get(\"TG_DEBUG\") or \"false\").lower() == \"true\"\nCSRF_TRUSTED_ORIGINS = (TG_WEBHOOK_HOST,)\nCORS_ORIGIN_ALLOW_ALL = False\nCORS_ORIGIN_WHITELIST = [\n    TG_WEBHOOK_HOST,\n]\n# Application definition\nINSTALLED_APPS = [\n    \"admin_interface\",\n    \"colorfield\", ",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = (TG_WEBHOOK_HOST,)\nCORS_ORIGIN_ALLOW_ALL = False\nCORS_ORIGIN_WHITELIST = [\n    TG_WEBHOOK_HOST,\n]\n# Application definition\nINSTALLED_APPS = [\n    \"admin_interface\",\n    \"colorfield\", \n    \"django.contrib.admin\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_ALLOW_ALL",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CORS_ORIGIN_ALLOW_ALL = False\nCORS_ORIGIN_WHITELIST = [\n    TG_WEBHOOK_HOST,\n]\n# Application definition\nINSTALLED_APPS = [\n    \"admin_interface\",\n    \"colorfield\", \n    \"django.contrib.admin\",\n    \"django.contrib.auth\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_WHITELIST",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CORS_ORIGIN_WHITELIST = [\n    TG_WEBHOOK_HOST,\n]\n# Application definition\nINSTALLED_APPS = [\n    \"admin_interface\",\n    \"colorfield\", \n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"admin_interface\",\n    \"colorfield\", \n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"django_celery_beat\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\nROOT_URLCONF = \"server.urls\"",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "ROOT_URLCONF = \"server.urls\"\n# Для сборки статических файлов\nSTATIC_URL = \"/static/\"  # URL для доступа к статическим файлам\n# Путь к папке, куда будут собираться статические файлы\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")  # Папка для собранных статических файлов\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"  # URL для доступа к статическим файлам\n# Путь к папке, куда будут собираться статические файлы\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")  # Папка для собранных статических файлов\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, \"static\")  # Папка для собранных статических файлов\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "WSGI_APPLICATION = \"server.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.getenv(\"POSTGRES_DB\"),\n        \"USER\": os.getenv(\"POSTGRES_USER\"),\n        \"PASSWORD\": os.getenv(\"POSTGRES_PASSWORD\"),\n        \"HOST\": os.getenv(\"POSTGRES_HOST\"),",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.getenv(\"POSTGRES_DB\"),\n        \"USER\": os.getenv(\"POSTGRES_USER\"),\n        \"PASSWORD\": os.getenv(\"POSTGRES_PASSWORD\"),\n        \"HOST\": os.getenv(\"POSTGRES_HOST\"),\n        \"PORT\": os.getenv(\"POSTGRES_PORT\"),\n    }\n}",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_ALWAYS_EAGER",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CELERY_TASK_ALWAYS_EAGER = False  # чтобы задачи не выполнялись синхронно\nCELERY_TASK_EAGER_PROPAGATES = True\nCELERY_BROKER_URL = f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/0'\nCELERY_ACCEPT_CONTENT = [\"json\"]\nCELERY_TASK_SERIALIZER = \"json\"\nCELERY_TIMEZONE = \"UTC\"\nCELERY_ENABLE_UTC = True\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_EAGER_PROPAGATES",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CELERY_TASK_EAGER_PROPAGATES = True\nCELERY_BROKER_URL = f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/0'\nCELERY_ACCEPT_CONTENT = [\"json\"]\nCELERY_TASK_SERIALIZER = \"json\"\nCELERY_TIMEZONE = \"UTC\"\nCELERY_ENABLE_UTC = True\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/1',",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CELERY_BROKER_URL = f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/0'\nCELERY_ACCEPT_CONTENT = [\"json\"]\nCELERY_TASK_SERIALIZER = \"json\"\nCELERY_TIMEZONE = \"UTC\"\nCELERY_ENABLE_UTC = True\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/1',\n    }",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_ACCEPT_CONTENT",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CELERY_ACCEPT_CONTENT = [\"json\"]\nCELERY_TASK_SERIALIZER = \"json\"\nCELERY_TIMEZONE = \"UTC\"\nCELERY_ENABLE_UTC = True\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/1',\n    }\n}",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_SERIALIZER",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CELERY_TASK_SERIALIZER = \"json\"\nCELERY_TIMEZONE = \"UTC\"\nCELERY_ENABLE_UTC = True\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/1',\n    }\n}\n# Password validation",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TIMEZONE",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CELERY_TIMEZONE = \"UTC\"\nCELERY_ENABLE_UTC = True\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/1',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_ENABLE_UTC",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CELERY_ENABLE_UTC = True\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/1',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "CACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": f'redis://{os.getenv(\"REDIS_HOST\")}:{os.getenv(\"REDIS_PORT\")}/1',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "LANGUAGE_CODE = \"ru-ru\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nLOGGING = {",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nLOGGING = {\n    \"version\": 1,",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"handlers\": {},\n    \"loggers\": {\n        \"\": {},",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"handlers\": {},\n    \"loggers\": {\n        \"\": {},\n    },\n}",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "app.server.settings",
        "description": "app.server.settings",
        "peekOfCode": "LOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"handlers\": {},\n    \"loggers\": {\n        \"\": {},\n    },\n}",
        "detail": "app.server.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.server.urls",
        "description": "app.server.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('bot/', include('tg_bot.urls')),  # Подключаем маршруты tg_bot\n]",
        "detail": "app.server.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "app.server.wsgi",
        "description": "app.server.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "app.server.wsgi",
        "documentation": {}
    },
    {
        "label": "TarotBot",
        "kind": 6,
        "importPath": "app.tarot.bot.tarot",
        "description": "app.tarot.bot.tarot",
        "peekOfCode": "class TarotBot(AbstractBot):\n    def __init__(self):\n        self.handlers = self.get_handlers()\n    def get_handlers(self):\n        return [\n            MessageHandler(filters.PHOTO, self.handle_photo_msg),\n            CommandHandler(\"start\", self.handle_help),\n            CommandHandler(\"help\", self.handle_help),\n            MessageHandler(\n                filters.COMMAND",
        "detail": "app.tarot.bot.tarot",
        "documentation": {}
    },
    {
        "label": "reading_ids",
        "kind": 5,
        "importPath": "app.tarot.bot.tarot",
        "description": "app.tarot.bot.tarot",
        "peekOfCode": "reading_ids = {}\nuser_exclude_cards = {}\nclass TarotBot(AbstractBot):\n    def __init__(self):\n        self.handlers = self.get_handlers()\n    def get_handlers(self):\n        return [\n            MessageHandler(filters.PHOTO, self.handle_photo_msg),\n            CommandHandler(\"start\", self.handle_help),\n            CommandHandler(\"help\", self.handle_help),",
        "detail": "app.tarot.bot.tarot",
        "documentation": {}
    },
    {
        "label": "user_exclude_cards",
        "kind": 5,
        "importPath": "app.tarot.bot.tarot",
        "description": "app.tarot.bot.tarot",
        "peekOfCode": "user_exclude_cards = {}\nclass TarotBot(AbstractBot):\n    def __init__(self):\n        self.handlers = self.get_handlers()\n    def get_handlers(self):\n        return [\n            MessageHandler(filters.PHOTO, self.handle_photo_msg),\n            CommandHandler(\"start\", self.handle_help),\n            CommandHandler(\"help\", self.handle_help),\n            MessageHandler(",
        "detail": "app.tarot.bot.tarot",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tarot.migrations.0001_initial",
        "description": "app.tarot.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0032_remove_extendedmeaning_category_base_and_more'),  # убедись, что выполнена\n    ]\n    operations = [\n        # Шаг 1: Физически переименовываем таблицы в БД\n        migrations.RunSQL(\"ALTER TABLE tg_bot_oraculumdeck RENAME TO tarot_oraculumdeck;\"),\n        migrations.RunSQL(\"ALTER TABLE tg_bot_oraculumitem RENAME TO tarot_oraculumitem;\"),\n        migrations.RunSQL(\"ALTER TABLE tg_bot_tarotcard RENAME TO tarot_tarotcard;\"),\n        migrations.RunSQL(\"ALTER TABLE tg_bot_tarotdeck RENAME TO tarot_tarotdeck;\"),",
        "detail": "app.tarot.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "TarotCardAdmin",
        "kind": 6,
        "importPath": "app.tarot.admin",
        "description": "app.tarot.admin",
        "peekOfCode": "class TarotCardAdmin(admin.ModelAdmin):\n    list_display = (\"card_id\", \"name\", \"is_major\")  # Добавлено card_id для наглядности\n    list_editable = (\"is_major\",)  # Разрешаем редактирование прямо в списке\n    list_filter = (\"is_major\",)  # Добавляем фильтр по этому полю\n    search_fields = (\"name\", \"card_id\")  # Поиск по названию и ID карты\n@admin.register(ExtendedMeaning)\nclass ExtendedMeaningAdmin(admin.ModelAdmin):\n    list_display = (\"tarot_card\", \"category\", \"category_base\", \"text\")\n@admin.register(TarotMeaningCategory)\nclass CategoryAdmin(admin.ModelAdmin):",
        "detail": "app.tarot.admin",
        "documentation": {}
    },
    {
        "label": "ExtendedMeaningAdmin",
        "kind": 6,
        "importPath": "app.tarot.admin",
        "description": "app.tarot.admin",
        "peekOfCode": "class ExtendedMeaningAdmin(admin.ModelAdmin):\n    list_display = (\"tarot_card\", \"category\", \"category_base\", \"text\")\n@admin.register(TarotMeaningCategory)\nclass CategoryAdmin(admin.ModelAdmin):\n    pass\n@admin.register(TarotDeck)\nclass TarotDeckAdmin(admin.ModelAdmin):\n    \"\"\"\n    Админка для модели TarotDeck.\n    \"\"\"",
        "detail": "app.tarot.admin",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "app.tarot.admin",
        "description": "app.tarot.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    pass\n@admin.register(TarotDeck)\nclass TarotDeckAdmin(admin.ModelAdmin):\n    \"\"\"\n    Админка для модели TarotDeck.\n    \"\"\"\n    list_display = (\"name\", \"link\")  # Поля, отображаемые в списке\n    search_fields = (\"name\",)  # Поля для поиска\n    list_filter = (\"name\",)  # Фильтры в правой панели",
        "detail": "app.tarot.admin",
        "documentation": {}
    },
    {
        "label": "TarotDeckAdmin",
        "kind": 6,
        "importPath": "app.tarot.admin",
        "description": "app.tarot.admin",
        "peekOfCode": "class TarotDeckAdmin(admin.ModelAdmin):\n    \"\"\"\n    Админка для модели TarotDeck.\n    \"\"\"\n    list_display = (\"name\", \"link\")  # Поля, отображаемые в списке\n    search_fields = (\"name\",)  # Поля для поиска\n    list_filter = (\"name\",)  # Фильтры в правой панели\n@admin.register(TarotCardItem)\nclass CardAdmin(admin.ModelAdmin):\n    \"\"\"",
        "detail": "app.tarot.admin",
        "documentation": {}
    },
    {
        "label": "CardAdmin",
        "kind": 6,
        "importPath": "app.tarot.admin",
        "description": "app.tarot.admin",
        "peekOfCode": "class CardAdmin(admin.ModelAdmin):\n    \"\"\"\n    Админка для модели Card.\n    \"\"\"\n    list_display = (\"deck\", \"tarot_card\", \"img_id\")  # Поля, отображаемые в списке\n    search_fields = (\"deck__name\", \"tarot_card__name\")  # Поля для поиска\n    list_filter = (\"deck\", \"tarot_card\")  # Фильтры в правой панели\n@admin.register(TarotUserReading)\nclass TarotUserReadingAdmin(admin.ModelAdmin):\n    # Поля, которые будут отображаться в списке записей",
        "detail": "app.tarot.admin",
        "documentation": {}
    },
    {
        "label": "TarotUserReadingAdmin",
        "kind": 6,
        "importPath": "app.tarot.admin",
        "description": "app.tarot.admin",
        "peekOfCode": "class TarotUserReadingAdmin(admin.ModelAdmin):\n    # Поля, которые будут отображаться в списке записей\n    list_display = (\"user\", \"date\", \"text\", \"message_id\")\n    # Поля, по которым можно фильтровать записи\n    list_filter = (\"user\", \"date\")\n    # Поля, по которым можно искать записи\n    search_fields = (\"text\", \"user__username\", \"message_id\")\n    # Поля, которые будут использоваться для детального просмотра записи\n    fieldsets = (\n        (",
        "detail": "app.tarot.admin",
        "documentation": {}
    },
    {
        "label": "OraculumDeckAdmin",
        "kind": 6,
        "importPath": "app.tarot.admin",
        "description": "app.tarot.admin",
        "peekOfCode": "class OraculumDeckAdmin(admin.ModelAdmin):\n    list_display = (\"name\", \"description\", \"created_at\")\n    search_fields = (\"name\", \"description\")\n    list_filter = (\"created_at\",)\n@admin.register(OraculumItem)\nclass OraculumItemAdmin(admin.ModelAdmin):\n    list_display = (\"name\", \"deck\", \"description\")\n    search_fields = (\"name\", \"description\", \"deck__name\")\n    list_filter = (\"deck\",)\n@admin.register(Rune)",
        "detail": "app.tarot.admin",
        "documentation": {}
    },
    {
        "label": "OraculumItemAdmin",
        "kind": 6,
        "importPath": "app.tarot.admin",
        "description": "app.tarot.admin",
        "peekOfCode": "class OraculumItemAdmin(admin.ModelAdmin):\n    list_display = (\"name\", \"deck\", \"description\")\n    search_fields = (\"name\", \"description\", \"deck__name\")\n    list_filter = (\"deck\",)\n@admin.register(Rune)\nclass RuneAdmin(admin.ModelAdmin):\n    list_display = (\"symbol\", \"type\", \"sticker\")\n    search_fields = (\"type\", \"symbol\")\n    list_filter = (\"type\",)\n    fieldsets = (",
        "detail": "app.tarot.admin",
        "documentation": {}
    },
    {
        "label": "RuneAdmin",
        "kind": 6,
        "importPath": "app.tarot.admin",
        "description": "app.tarot.admin",
        "peekOfCode": "class RuneAdmin(admin.ModelAdmin):\n    list_display = (\"symbol\", \"type\", \"sticker\")\n    search_fields = (\"type\", \"symbol\")\n    list_filter = (\"type\",)\n    fieldsets = (\n        (\n            \"Основная информация\",\n            {\n                \"fields\": (\"type\", \"symbol\", \"sticker\"),\n            },",
        "detail": "app.tarot.admin",
        "documentation": {}
    },
    {
        "label": "TarotConfig",
        "kind": 6,
        "importPath": "app.tarot.apps",
        "description": "app.tarot.apps",
        "peekOfCode": "class TarotConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'tarot'",
        "detail": "app.tarot.apps",
        "documentation": {}
    },
    {
        "label": "TarotCard",
        "kind": 6,
        "importPath": "app.tarot.models",
        "description": "app.tarot.models",
        "peekOfCode": "class TarotCard(models.Model):\n    card_id = models.CharField(max_length=10, unique=True, verbose_name=\"ID карты\")\n    name = models.CharField(max_length=255, verbose_name=\"Название карты\")\n    meaning = models.TextField(verbose_name=\"Основное значение\")\n    meaning_url = models.URLField(\n        verbose_name=\"Ссылка на значение\", blank=True, null=True\n    )\n    is_major = models.BooleanField(default=False)\n    def __str__(self):\n        return self.name",
        "detail": "app.tarot.models",
        "documentation": {}
    },
    {
        "label": "TarotMeaningCategory",
        "kind": 6,
        "importPath": "app.tarot.models",
        "description": "app.tarot.models",
        "peekOfCode": "class TarotMeaningCategory(models.Model):\n    name = models.CharField(max_length=50, verbose_name=\"Категория\", unique=True)\n    def __str__(self):\n        return self.name\n    class Meta:\n        verbose_name = f\"{bot_prefix}: Категория\"\n        verbose_name_plural = f\"{bot_prefix}: Категории\"\nclass ExtendedMeaning(models.Model):\n    tarot_card = models.ForeignKey(\n        TarotCard, on_delete=models.CASCADE, related_name=\"extended_meanings\"",
        "detail": "app.tarot.models",
        "documentation": {}
    },
    {
        "label": "ExtendedMeaning",
        "kind": 6,
        "importPath": "app.tarot.models",
        "description": "app.tarot.models",
        "peekOfCode": "class ExtendedMeaning(models.Model):\n    tarot_card = models.ForeignKey(\n        TarotCard, on_delete=models.CASCADE, related_name=\"extended_meanings\"\n    )\n    category = models.CharField(max_length=50, verbose_name=\"Категория\")\n    category_base = models.ForeignKey(\n        TarotMeaningCategory, on_delete=models.SET_NULL, null=True, related_name=\"cat\"\n    )\n    text = models.TextField(verbose_name=\"Текст значения\")\n    def __str__(self):",
        "detail": "app.tarot.models",
        "documentation": {}
    },
    {
        "label": "TarotDeck",
        "kind": 6,
        "importPath": "app.tarot.models",
        "description": "app.tarot.models",
        "peekOfCode": "class TarotDeck(models.Model):\n    \"\"\"\n    Модель для хранения информации о колоде Таро.\n    \"\"\"\n    name = models.CharField(max_length=255, unique=True, verbose_name=\"Название колоды\")\n    link = models.CharField(\n        max_length=255,\n        null=True,\n        blank=True,\n        default=None,",
        "detail": "app.tarot.models",
        "documentation": {}
    },
    {
        "label": "TarotCardItem",
        "kind": 6,
        "importPath": "app.tarot.models",
        "description": "app.tarot.models",
        "peekOfCode": "class TarotCardItem(models.Model):\n    \"\"\"\n    Модель для хранения информации о карте в колоде.\n    \"\"\"\n    deck = models.ForeignKey(\n        TarotDeck, on_delete=models.CASCADE, related_name=\"cards\", verbose_name=\"Колода\"\n    )\n    tarot_card = models.ForeignKey(\n        \"TarotCard\",\n        on_delete=models.CASCADE,",
        "detail": "app.tarot.models",
        "documentation": {}
    },
    {
        "label": "TarotUserReading",
        "kind": 6,
        "importPath": "app.tarot.models",
        "description": "app.tarot.models",
        "peekOfCode": "class TarotUserReading(models.Model):\n    user = models.ForeignKey(\n        \"tg_bot.TgUser\",  # Укажите имя модели, если TgUser определена в другом месте\n        on_delete=models.SET_NULL,\n        related_name=\"readings\",\n        null=True,\n        verbose_name=\"Пользователь\",  # Человекочитаемое имя для поля\n    )\n    date = models.DateTimeField(\n        default=timezone.now, verbose_name=\"Дата гадания\"",
        "detail": "app.tarot.models",
        "documentation": {}
    },
    {
        "label": "OraculumDeck",
        "kind": 6,
        "importPath": "app.tarot.models",
        "description": "app.tarot.models",
        "peekOfCode": "class OraculumDeck(models.Model):\n    name = models.CharField(\n        max_length=255,\n        verbose_name=\"Название колоды\",\n        help_text=\"Название колоды (например, 'Колода МЛАДЕНЦА').\",\n    )\n    description = models.TextField(\n        verbose_name=\"Описание колоды\",\n        help_text=\"Краткое описание колоды.\",\n        blank=True,",
        "detail": "app.tarot.models",
        "documentation": {}
    },
    {
        "label": "OraculumItem",
        "kind": 6,
        "importPath": "app.tarot.models",
        "description": "app.tarot.models",
        "peekOfCode": "class OraculumItem(models.Model):\n    deck = models.ForeignKey(\n        OraculumDeck,\n        on_delete=models.CASCADE,\n        related_name=\"cards\",\n        verbose_name=\"Колода\",\n        help_text=\"Колода, к которой относится карта.\",\n    )\n    img_id = models.CharField(\n        max_length=255,",
        "detail": "app.tarot.models",
        "documentation": {}
    },
    {
        "label": "Rune",
        "kind": 6,
        "importPath": "app.tarot.models",
        "description": "app.tarot.models",
        "peekOfCode": "class Rune(models.Model):\n    type = models.CharField(max_length=50, verbose_name=\"Тип руны\")\n    symbol = models.CharField(max_length=10, verbose_name=\"Символ руны\")\n    sticker = models.CharField(max_length=100, verbose_name=\"ID стикера\")\n    # Прямое значение\n    straight_keys = models.TextField(verbose_name=\"Ключи (прямое)\")\n    straight_meaning = models.TextField(verbose_name=\"Значение (прямое)\")\n    straight_pos_1 = models.TextField(verbose_name=\"Позиция 1 (прямое)\")\n    straight_pos_2 = models.TextField(verbose_name=\"Позиция 2 (прямое)\")\n    straight_pos_3 = models.TextField(verbose_name=\"Позиция 3 (прямое)\")",
        "detail": "app.tarot.models",
        "documentation": {}
    },
    {
        "label": "bot_prefix",
        "kind": 5,
        "importPath": "app.tarot.models",
        "description": "app.tarot.models",
        "peekOfCode": "bot_prefix = \"Tarot\"\nclass TarotCard(models.Model):\n    card_id = models.CharField(max_length=10, unique=True, verbose_name=\"ID карты\")\n    name = models.CharField(max_length=255, verbose_name=\"Название карты\")\n    meaning = models.TextField(verbose_name=\"Основное значение\")\n    meaning_url = models.URLField(\n        verbose_name=\"Ссылка на значение\", blank=True, null=True\n    )\n    is_major = models.BooleanField(default=False)\n    def __str__(self):",
        "detail": "app.tarot.models",
        "documentation": {}
    },
    {
        "label": "AbstractBot",
        "kind": 6,
        "importPath": "app.tg_bot.bot.abstract",
        "description": "app.tg_bot.bot.abstract",
        "peekOfCode": "class AbstractBot(ABC):\n    handlers = []\n    @abstractmethod\n    def get_handlers(self):\n        pass",
        "detail": "app.tg_bot.bot.abstract",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.tg_bot.management.commands.load_oraculum_decks",
        "description": "app.tg_bot.management.commands.load_oraculum_decks",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Загружает колоды и карты из JSON-файлов в папке decks.\"\n    def handle(self, *args, **kwargs):\n        # Путь к файлу decks.json\n        decks_file_path = settings.BASE_DIR / \"tg_bot\" / \"tarot_data\" / \"oraculum.json\"\n        # Проверяем, существует ли файл\n        if not decks_file_path.exists():\n            self.stdout.write(self.style.ERROR(f\"Файл {decks_file_path} не найден.\"))\n            return\n        # Чтение файла decks.json",
        "detail": "app.tg_bot.management.commands.load_oraculum_decks",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.tg_bot.management.commands.load_runes",
        "description": "app.tg_bot.management.commands.load_runes",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Загружает данные о рунах из JSON-файла\"\n    def handle(self, *args, **kwargs):\n        json_file_path = settings.BASE_DIR / \"tg_bot\" / \"tarot_data\" / \"futark.json\"\n        with open(json_file_path, \"r\", encoding=\"utf-8\") as file:\n            runes_data = json.load(file)\n        for rune_data in runes_data:\n            # Извлечение данных о рунах\n            rune_meaning = rune_data.get(\"meaning\", {})\n            # Проверка наличия \"straight\" и \"inverted\"",
        "detail": "app.tg_bot.management.commands.load_runes",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.tg_bot.management.commands.load_tarot_cards",
        "description": "app.tg_bot.management.commands.load_tarot_cards",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Загружает данные о картах Таро из JSON-файла в базу данных.\"\n    def handle(self, *args, **kwargs):\n        # Путь к JSON-файлу\n        json_file_path = settings.BASE_DIR / \"tg_bot\" / \"tarot_data\" / \"cards.json\"\n        # Чтение JSON-файла\n        with open(json_file_path, \"r\", encoding=\"utf-8\") as file:\n            tarot_data = json.load(file)\n        for card_id, card_data in tarot_data.items():\n            # Создание или обновление карты",
        "detail": "app.tg_bot.management.commands.load_tarot_cards",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.tg_bot.management.commands.load_tarot_decks",
        "description": "app.tg_bot.management.commands.load_tarot_decks",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Загружает колоды и карты из JSON-файлов в папке decks.\"\n    def handle(self, *args, **kwargs):\n        # Путь к файлу decks.json\n        decks_file_path = settings.BASE_DIR / \"tg_bot\" / \"tarot_data\" / \"decks.json\"\n        # Проверяем, существует ли файл\n        if not decks_file_path.exists():\n            self.stdout.write(self.style.ERROR(f\"Файл {decks_file_path} не найден.\"))\n            return\n        # Чтение файла decks.json",
        "detail": "app.tg_bot.management.commands.load_tarot_decks",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.tg_bot.management.commands.start_bot_processing",
        "description": "app.tg_bot.management.commands.start_bot_processing",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Запуск процесса для всех ботов\"\n    def handle(self, *args, **kwargs):\n        from tg_bot.models import Bot\n        from tg_bot.tasks import process_bot\n        logger.info(\"Запуск команды start_bot_processing.\")\n        try:\n            logger.info(\"Запуск обработки ботов...\")\n            from tg_bot.models import Bot\n            # Получаем всех ботов",
        "detail": "app.tg_bot.management.commands.start_bot_processing",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0001_initial",
        "description": "app.tg_bot.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Bot',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, verbose_name='Название бота')),",
        "detail": "app.tg_bot.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0002_parseproduct_tguser_tguserproduct",
        "description": "app.tg_bot.migrations.0002_parseproduct_tguser_tguserproduct",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ParseProduct',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('product_id', models.CharField(max_length=255, verbose_name='ID товара')),",
        "detail": "app.tg_bot.migrations.0002_parseproduct_tguser_tguserproduct",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0003_tarotcard_tarotdeck_alter_parseproduct_options_and_more_squashed_0004_alter_tarotcarditem_unique_together_and_more",
        "description": "app.tg_bot.migrations.0003_tarotcard_tarotdeck_alter_parseproduct_options_and_more_squashed_0004_alter_tarotcarditem_unique_together_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    replaces = [('tg_bot', '0003_tarotcard_tarotdeck_alter_parseproduct_options_and_more'), ('tg_bot', '0004_alter_tarotcarditem_unique_together_and_more')]\n    dependencies = [\n        ('tg_bot', '0002_parseproduct_tguser_tguserproduct'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TarotCard',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "app.tg_bot.migrations.0003_tarotcard_tarotdeck_alter_parseproduct_options_and_more_squashed_0004_alter_tarotcarditem_unique_together_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0005_alter_bot_options_bot_bot_type",
        "description": "app.tg_bot.migrations.0005_alter_bot_options_bot_bot_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0003_tarotcard_tarotdeck_alter_parseproduct_options_and_more_squashed_0004_alter_tarotcarditem_unique_together_and_more'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='bot',\n            options={'verbose_name': 'Бот', 'verbose_name_plural': 'Боты'},\n        ),\n        migrations.AddField(",
        "detail": "app.tg_bot.migrations.0005_alter_bot_options_bot_bot_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0006_tarotcard_is_major",
        "description": "app.tg_bot.migrations.0006_tarotcard_is_major",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0005_alter_bot_options_bot_bot_type'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='tarotcard',\n            name='is_major',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "app.tg_bot.migrations.0006_tarotcard_is_major",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0007_category_extendedmeaning_category_new_squashed_0016_extendedmeaning_category_base",
        "description": "app.tg_bot.migrations.0007_category_extendedmeaning_category_new_squashed_0016_extendedmeaning_category_base",
        "peekOfCode": "class Migration(migrations.Migration):\n    replaces = [('tg_bot', '0007_category_extendedmeaning_category_new'), ('tg_bot', '0008_remove_extendedmeaning_category'), ('tg_bot', '0009_rename_category_new_extendedmeaning_category'), ('tg_bot', '0010_remove_extendedmeaning_category_and_more'), ('tg_bot', '0011_remove_extendedmeaning_category_new_and_more'), ('tg_bot', '0012_remove_extendedmeaning_category'), ('tg_bot', '0013_extendedmeaning_category'), ('tg_bot', '0014_extendedmeaning_category_base'), ('tg_bot', '0015_remove_extendedmeaning_category_base'), ('tg_bot', '0016_extendedmeaning_category_base')]\n    dependencies = [\n        ('tg_bot', '0006_tarotcard_is_major'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "app.tg_bot.migrations.0007_category_extendedmeaning_category_new_squashed_0016_extendedmeaning_category_base",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0017_rename_category_tarotmeaningcategory_and_more",
        "description": "app.tg_bot.migrations.0017_rename_category_tarotmeaningcategory_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0007_category_extendedmeaning_category_new_squashed_0016_extendedmeaning_category_base'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='Category',\n            new_name='TarotMeaningCategory',\n        ),\n        migrations.CreateModel(",
        "detail": "app.tg_bot.migrations.0017_rename_category_tarotmeaningcategory_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0018_tarotuserreading_message_id",
        "description": "app.tg_bot.migrations.0018_tarotuserreading_message_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0017_rename_category_tarotmeaningcategory_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='tarotuserreading',\n            name='message_id',\n            field=models.IntegerField(blank=True, null=True, verbose_name='ID сообщения'),\n        ),",
        "detail": "app.tg_bot.migrations.0018_tarotuserreading_message_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0019_oraculumdeck_oraculum_squashed_0021_alter_oraculum_description_alter_oraculum_direct",
        "description": "app.tg_bot.migrations.0019_oraculumdeck_oraculum_squashed_0021_alter_oraculum_description_alter_oraculum_direct",
        "peekOfCode": "class Migration(migrations.Migration):\n    replaces = [('tg_bot', '0019_oraculumdeck_oraculum'), ('tg_bot', '0020_alter_oraculum_inverted'), ('tg_bot', '0021_alter_oraculum_description_alter_oraculum_direct')]\n    dependencies = [\n        ('tg_bot', '0018_tarotuserreading_message_id'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='OraculumDeck',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "app.tg_bot.migrations.0019_oraculumdeck_oraculum_squashed_0021_alter_oraculum_description_alter_oraculum_direct",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0022_rename_oraculum_oraculumitem",
        "description": "app.tg_bot.migrations.0022_rename_oraculum_oraculumitem",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0019_oraculumdeck_oraculum_squashed_0021_alter_oraculum_description_alter_oraculum_direct'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='Oraculum',\n            new_name='OraculumItem',\n        ),\n    ]",
        "detail": "app.tg_bot.migrations.0022_rename_oraculum_oraculumitem",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0023_rename_file_id_oraculumitem_img_id",
        "description": "app.tg_bot.migrations.0023_rename_file_id_oraculumitem_img_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0022_rename_oraculum_oraculumitem'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='oraculumitem',\n            old_name='file_id',\n            new_name='img_id',\n        ),",
        "detail": "app.tg_bot.migrations.0023_rename_file_id_oraculumitem_img_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0024_rune_alter_oraculumdeck_options_and_more",
        "description": "app.tg_bot.migrations.0024_rune_alter_oraculumdeck_options_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0023_rename_file_id_oraculumitem_img_id'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Rune',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('type', models.CharField(max_length=50, verbose_name='Тип руны')),",
        "detail": "app.tg_bot.migrations.0024_rune_alter_oraculumdeck_options_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0025_alter_rune_inverted_keys_alter_rune_inverted_meaning_and_more",
        "description": "app.tg_bot.migrations.0025_alter_rune_inverted_keys_alter_rune_inverted_meaning_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0024_rune_alter_oraculumdeck_options_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='rune',\n            name='inverted_keys',\n            field=models.TextField(blank=True, null=True, verbose_name='Ключи (перевернутое)'),\n        ),",
        "detail": "app.tg_bot.migrations.0025_alter_rune_inverted_keys_alter_rune_inverted_meaning_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0026_brand_parseproduct_brand_category_and_more",
        "description": "app.tg_bot.migrations.0026_brand_parseproduct_brand_category_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0025_alter_rune_inverted_keys_alter_rune_inverted_meaning_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Brand',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255, verbose_name='Название бренда')),",
        "detail": "app.tg_bot.migrations.0026_brand_parseproduct_brand_category_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0027_remove_category_parent_id",
        "description": "app.tg_bot.migrations.0027_remove_category_parent_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0026_brand_parseproduct_brand_category_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='category',\n            name='parent_id',\n        ),\n    ]",
        "detail": "app.tg_bot.migrations.0027_remove_category_parent_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0028_remove_parseproduct_photo_id_productimage",
        "description": "app.tg_bot.migrations.0028_remove_parseproduct_photo_id_productimage",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"tg_bot\", \"0027_remove_category_parent_id\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"ProductImage\",\n            fields=[\n                (\n                    \"id\",",
        "detail": "app.tg_bot.migrations.0028_remove_parseproduct_photo_id_productimage",
        "documentation": {}
    },
    {
        "label": "forwards_func",
        "kind": 2,
        "importPath": "app.tg_bot.migrations.0028_remove_parseproduct_photo_id_productimage",
        "description": "app.tg_bot.migrations.0028_remove_parseproduct_photo_id_productimage",
        "peekOfCode": "def forwards_func(apps, schema_editor):\n    ParseProduct = apps.get_model(\"tg_bot\", \"ParseProduct\")\n    ProductImage = apps.get_model(\"tg_bot\", \"ProductImage\")\n    images_to_create = []\n    for product in (\n        ParseProduct.objects.exclude(photo_id__isnull=True)\n        .exclude(photo_id=\"\")\n        .exclude(photo_id__regex=r\"^\\s*$\")\n    ):\n        media = product.photo_id.strip()",
        "detail": "app.tg_bot.migrations.0028_remove_parseproduct_photo_id_productimage",
        "documentation": {}
    },
    {
        "label": "reverse_func",
        "kind": 2,
        "importPath": "app.tg_bot.migrations.0028_remove_parseproduct_photo_id_productimage",
        "description": "app.tg_bot.migrations.0028_remove_parseproduct_photo_id_productimage",
        "peekOfCode": "def reverse_func(apps, schema_editor):\n    # Обратная миграция: не удаляем данные, просто не делаем ничего\n    # Или можно добавить логику удаления, если нужно\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"tg_bot\", \"0027_remove_category_parent_id\"),\n    ]\n    operations = [\n        migrations.CreateModel(",
        "detail": "app.tg_bot.migrations.0028_remove_parseproduct_photo_id_productimage",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0029_alter_tguserproduct_unique_together",
        "description": "app.tg_bot.migrations.0029_alter_tguserproduct_unique_together",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0028_remove_parseproduct_photo_id_productimage'),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name='tguserproduct',\n            unique_together=set(),\n        ),\n    ]",
        "detail": "app.tg_bot.migrations.0029_alter_tguserproduct_unique_together",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0030_parseproduct_name",
        "description": "app.tg_bot.migrations.0030_parseproduct_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0029_alter_tguserproduct_unique_together'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='parseproduct',\n            name='name',\n            field=models.CharField(blank=True, help_text='Официальное название товара (опционально)', max_length=255, null=True, verbose_name='Название товара'),\n        ),",
        "detail": "app.tg_bot.migrations.0030_parseproduct_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0031_remove_parseproduct_brand_and_more",
        "description": "app.tg_bot.migrations.0031_remove_parseproduct_brand_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0030_parseproduct_name'),\n    ]\n    operations = [\n                migrations.SeparateDatabaseAndState(\n            database_operations=[],  # Ничего не делаем с БД\n            state_operations=[\n        migrations.RemoveField(\n            model_name='parseproduct',",
        "detail": "app.tg_bot.migrations.0031_remove_parseproduct_brand_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.tg_bot.migrations.0032_remove_extendedmeaning_category_base_and_more",
        "description": "app.tg_bot.migrations.0032_remove_extendedmeaning_category_base_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tg_bot', '0031_remove_parseproduct_brand_and_more'),\n    ]\n    operations = [\n                migrations.SeparateDatabaseAndState(\n            database_operations=[],  # Ничего не делаем с БД\n            state_operations=[\n        migrations.RemoveField(\n            model_name='extendedmeaning',",
        "detail": "app.tg_bot.migrations.0032_remove_extendedmeaning_category_base_and_more",
        "documentation": {}
    },
    {
        "label": "Bot",
        "kind": 6,
        "importPath": "app.tg_bot.models.base",
        "description": "app.tg_bot.models.base",
        "peekOfCode": "class Bot(models.Model):\n    # Типы ботов\n    BOT_TYPE_CHOICES = [\n        (\"ParserBot\", \"ParserBot\"),\n        (\"TarotBot\", \"TarotBot\"),\n    ]\n    name = models.CharField(max_length=100, verbose_name=\"Название бота\")\n    token = models.CharField(max_length=255, verbose_name=\"Токен\")\n    chat_id = models.CharField(max_length=50, verbose_name=\"Chat ID\")\n    bot_type = models.CharField(",
        "detail": "app.tg_bot.models.base",
        "documentation": {}
    },
    {
        "label": "TgUser",
        "kind": 6,
        "importPath": "app.tg_bot.models.base",
        "description": "app.tg_bot.models.base",
        "peekOfCode": "class TgUser(models.Model):\n    \"\"\"Модель для хранения данных о пользователе Telegram.\"\"\"\n    tg_id = models.BigIntegerField(unique=True, verbose_name=\"Telegram ID\")\n    username = models.CharField(\n        max_length=255, blank=True, null=True, verbose_name=\"Username\"\n    )\n    first_name = models.CharField(\n        max_length=255, blank=True, null=True, verbose_name=\"Имя\"\n    )\n    last_name = models.CharField(",
        "detail": "app.tg_bot.models.base",
        "documentation": {}
    },
    {
        "label": "BotAdmin",
        "kind": 6,
        "importPath": "app.tg_bot.admin",
        "description": "app.tg_bot.admin",
        "peekOfCode": "class BotAdmin(admin.ModelAdmin):\n    list_display = (\"name\", \"token\", \"chat_id\", \"bot_type\", \"created_at\", \"updated_at\")\n    search_fields = (\"name\", \"token\", \"chat_id\")\n    list_filter = (\"bot_type\", \"created_at\")",
        "detail": "app.tg_bot.admin",
        "documentation": {}
    },
    {
        "label": "TgBotConfig",
        "kind": 6,
        "importPath": "app.tg_bot.apps",
        "description": "app.tg_bot.apps",
        "peekOfCode": "class TgBotConfig(AppConfig):\n    name = 'tg_bot'\n    _task_started = False\n    def ready(self):\n        if self._task_started:\n            logger.info(\"Задача уже была запущена. Пропускаем.\")\n            return\n        # Если запущен runserver, проверяем, что это основной процесс\n        if 'runserver' in sys.argv:\n            # Проверяем RUN_MAIN для основного процесса",
        "detail": "app.tg_bot.apps",
        "documentation": {}
    },
    {
        "label": "BotSerializer",
        "kind": 6,
        "importPath": "app.tg_bot.serializers",
        "description": "app.tg_bot.serializers",
        "peekOfCode": "class BotSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Bot\n        fields = \"__all__\"",
        "detail": "app.tg_bot.serializers",
        "documentation": {}
    },
    {
        "label": "process_bot",
        "kind": 2,
        "importPath": "app.tg_bot.tasks",
        "description": "app.tg_bot.tasks",
        "peekOfCode": "def process_bot(self, token, handlersClass):\n    lock_key = f\"bot_processing_lock_{token}\"\n    def cleanup_on_exit(signum, frame):\n        logger.info(\"Завершаем работу контейнера и очищаем ресурсы...\")\n        # Выполним нужные очистки, например, удалим блокировку Redis\n        redis_client.delete(lock_key)\n    # Попробуем установить блокировку, если она уже установлена — выходим\n    if not redis_client.setnx(lock_key, \"locked\"):\n        logger.info(f\"Задача для бота с токеном {token} уже выполняется. Пропускаем.\")\n        return",
        "detail": "app.tg_bot.tasks",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "kind": 5,
        "importPath": "app.tg_bot.tasks",
        "description": "app.tg_bot.tasks",
        "peekOfCode": "redis_client = redis.StrictRedis(\n    host=os.getenv(\"REDIS_HOST\"), port=os.getenv(\"REDIS_PORT\"), db=2\n)\n# Асинхронная обработка бота\nasync def run_bot(token, handlersClass):\n    # Динамически создаем класс по имени\n    bot_class = globals().get(handlersClass)\n    if not bot_class:\n        logger.error(f\"Класс {handlersClass} не найден\")\n        return",
        "detail": "app.tg_bot.tasks",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.tg_bot.urls",
        "description": "app.tg_bot.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r\"bots\", BotViewSet)\nurlpatterns = [\n    path(\"\", include(router.urls)),  \n    path(\"webhook/<str:token>/\", webhook, name=\"webhook\"),  # Маршрут для вебхука с токеном\n]",
        "detail": "app.tg_bot.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.tg_bot.urls",
        "description": "app.tg_bot.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", include(router.urls)),  \n    path(\"webhook/<str:token>/\", webhook, name=\"webhook\"),  # Маршрут для вебхука с токеном\n]",
        "detail": "app.tg_bot.urls",
        "documentation": {}
    },
    {
        "label": "BotViewSet",
        "kind": 6,
        "importPath": "app.tg_bot.views",
        "description": "app.tg_bot.views",
        "peekOfCode": "class BotViewSet(viewsets.ModelViewSet):\n    queryset = Bot.objects.all()\n    serializer_class = BotSerializer\n# Декоратор для обработки webhook без CSRF-проверки\n@csrf_exempt\ndef webhook(request, token):\n    if request.method == \"POST\":\n        # Получаем JSON строку из тела запроса\n        json_str = request.body.decode(\"UTF-8\")\n        # Проверка, что это сообщение (опционально)",
        "detail": "app.tg_bot.views",
        "documentation": {}
    },
    {
        "label": "webhook",
        "kind": 2,
        "importPath": "app.tg_bot.views",
        "description": "app.tg_bot.views",
        "peekOfCode": "def webhook(request, token):\n    if request.method == \"POST\":\n        # Получаем JSON строку из тела запроса\n        json_str = request.body.decode(\"UTF-8\")\n        # Проверка, что это сообщение (опционально)\n        try:\n            # Вы можете просто поместить строку JSON в очередь\n            redis_client.rpush(f\"bot_messages_queue_{token}\", json_str)\n            logger.info(f\"Сообщение добавлено в очередь: {json_str[0:50]}\")\n            return JsonResponse({\"status\": \"ok\"})",
        "detail": "app.tg_bot.views",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "kind": 5,
        "importPath": "app.tg_bot.views",
        "description": "app.tg_bot.views",
        "peekOfCode": "redis_client = redis.StrictRedis(\n    host=os.getenv(\"REDIS_HOST\"), port=os.getenv(\"REDIS_PORT\"), db=2\n)\nclass BotViewSet(viewsets.ModelViewSet):\n    queryset = Bot.objects.all()\n    serializer_class = BotSerializer\n# Декоратор для обработки webhook без CSRF-проверки\n@csrf_exempt\ndef webhook(request, token):\n    if request.method == \"POST\":",
        "detail": "app.tg_bot.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app.manage",
        "description": "app.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'server.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "app.manage",
        "documentation": {}
    }
]