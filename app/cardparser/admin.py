from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe

from tg_bot.models import Bot, TgUser
from .models import ParseProduct, TgUserProduct, Brand, Category, ProductImage, BotSettings, EventCaption, ProductTemplate


@admin.register(TgUserProduct)
class TgUserProductAdmin(admin.ModelAdmin):
    list_display = ("tg_user", "product", "sent_at")
    list_filter = ("sent_at",)
    search_fields = ("tg_user__username", "product__caption")

# === Inline: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ParseProduct ===
class ProductImageInline(admin.TabularInline):
    model = ProductImage
    extra = 0
    readonly_fields = ("image_type", "file_id", "url", "created_at")
    fields = ("image_type", "file_id", "url", "created_at")
    can_delete = False
    show_change_link = True


# === –ê–¥–º–∏–Ω–∫–∞: TgUserProduct (Inline) ===
class TgUserProductInline(admin.TabularInline):
    model = TgUserProduct
    extra = 0
    readonly_fields = ("sent_at", "tg_user")
    fields = ("tg_user", "sent_at")
    can_delete = False  # —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ —É–¥–∞–ª–∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—é
    show_change_link = True


# === –ê–¥–º–∏–Ω–∫–∞: ParseProduct ===
@admin.register(ParseProduct)
class ParseProductAdmin(admin.ModelAdmin):
    list_display = (
        "product_id",
        "product_type",
        "name",
        "brand__name",
        "category__name",
        "created_at",
        "updated_at",
    )
    list_filter = ("product_type", "brand", "category", "created_at")
    search_fields = ("product_id", "caption", "brand__name", "category__name", "name")
    readonly_fields = ("created_at", "updated_at")
    raw_id_fields = ("brand", "category")  # —É–¥–æ–±–Ω–æ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
    date_hierarchy = "created_at"
    ordering = ("-created_at",)

    fieldsets = (
        (
            "–û—Å–Ω–æ–≤–Ω–æ–µ",
            {
                "fields": ("product_id", "product_type", "name", "caption"),
            },
        ),
        (
            "–°–≤—è–∑–∏",
            {
                "fields": ("brand", "category"),
            },
        ),
        (
            "–ê—É–¥–∏—Ç",
            {
                "fields": ("created_at", "updated_at"),
            },
        ),
    )

    inlines = [ProductImageInline, TgUserProductInline]


# === –ê–¥–º–∏–Ω–∫–∞: ProductImage (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ) ===
@admin.register(ProductImage)
class ProductImageAdmin(admin.ModelAdmin):
    list_display = (
        "product",
        "image_type",
        "file_id_preview",
        "url_preview",
        "created_at",
    )
    list_filter = ("image_type", "created_at")
    search_fields = ("file_id", "url", "product__product_id")
    readonly_fields = ("created_at", "updated_at", "file_id_preview", "url_preview")

    def file_id_preview(self, obj):
        if obj.file_id:
            return format_html(
                '<span title="{}">{}</span>', obj.file_id, obj.file_id[:20] + "..."
            )
        return "-"

    file_id_preview.short_description = "file_id"

    def url_preview(self, obj):
        if obj.url:
            return format_html('<a href="{0}" target="_blank">{0}</a>', obj.url)
        return "-"

    url_preview.short_description = "URL"


# === –ê–¥–º–∏–Ω–∫–∞: Brand ===
@admin.register(Brand)
class BrandAdmin(admin.ModelAdmin):
    list_display = (
        "name",
        "brand_id",
        "product_type",
        "products_count",
        "created_at",
    )
    list_filter = ("product_type", "created_at")
    search_fields = ("name", "brand_id")
    readonly_fields = ("created_at",)
    fieldsets = (
        (
            "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            {
                "fields": ("name", "brand_id", "product_type"),
            },
        ),
        (
            "–ê—É–¥–∏—Ç",
            {
                "fields": ("created_at",),
            },
        ),
    )
    ordering = ("name",)

    def products_count(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞"""
        count = obj.parseproduct_set.count()
        url = (
            f"/admin/parser/parseproduct/?brand__id={obj.id}"
            if hasattr(obj, "parseproduct_set")
            else "#"
        )
        return format_html(
            '<a href="{}" style="text-decoration: none;">üß© <strong>{}</strong></a>',
            url,
            count,
        )

    products_count.short_description = "–¢–æ–≤–∞—Ä—ã"
    products_count.allow_tags = True


# === –ê–¥–º–∏–Ω–∫–∞: Category ===
@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = (
        "name",
        "subject_id",
        "product_type",
        "products_count",
        "created_at",
    )
    list_filter = ("product_type", "created_at")
    search_fields = ("name", "subject_id")
    readonly_fields = ("created_at",)
    fieldsets = (
        (
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            {
                "fields": ("name", "subject_id", "product_type"),
            },
        ),
        (
            "–ê—É–¥–∏—Ç",
            {
                "fields": ("created_at",),
            },
        ),
    )
    ordering = ("name",)

    def products_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        count = obj.parseproduct_set.count()
        url = f"/admin/parser/parseproduct/?category__id={obj.id}"
        return format_html(
            '<a href="{}" style="text-decoration: none;">üì¶ <strong>{}</strong></a>',
            url,
            count,
        )

    products_count.short_description = "–¢–æ–≤–∞—Ä—ã"
    products_count.allow_tags = True

@admin.register(BotSettings)
class BotSettingsAdmin(admin.ModelAdmin):
    # –ü–æ–ª—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –≤ —Å–ø–∏—Å–∫–µ
    list_display = [
        "active_status",
        "marketing_group_id",
        "picture_chat_id",
        "parser_urls",
        "updated_at",
    ]

    # –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ
    readonly_fields = ["created_at", "updated_at"]
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–µ
    fieldsets = [
        ("–ê–∫—Ç–∏–≤–∞—Ü–∏—è", {
            "fields": ["active"],
            "description": "‚ö†Ô∏è –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π."
        }),
        ("–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", {
            "fields": ["marketing_group_id", "picture_chat_id"]
        }),
        ("URL –ø–∞—Ä—Å–µ—Ä–æ–≤", {
            "fields": ["parser_url_ozon", "parser_url_wb"]
        }),
        ("–ê—É–¥–∏—Ç", {
            "fields": ["created_at", "updated_at"],
            "classes": ["collapse"]
        }),
    ]

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    ordering = ["-active", "-updated_at"]

    # –ü–æ–∏—Å–∫
    search_fields = ["marketing_group_id", "picture_chat_id"]

    # –§–∏–ª—å—Ç—Ä—ã
    list_filter = ["active"]

    @admin.display(description="–°—Ç–∞—Ç—É—Å")
    def active_status(self, obj):
        return format_html(
            '<span style="color: {};">‚óè</span> {}',
            "green" if obj.active else "gray",
            "–ê–∫—Ç–∏–≤–Ω–æ" if obj.active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
        )

    @admin.display(description="–ü–∞—Ä—Å–µ—Ä—ã")
    def parser_urls(self, obj):
        lines = []
        if obj.parser_url_ozon:
            lines.append(f"Ozon: <code style='font-size:0.9em'>{obj.parser_url_ozon}</code>")
        if obj.parser_url_wb:
            lines.append(f"WB: <code style='font-size:0.9em'>{obj.parser_url_wb}</code>")
        return format_html("<br>".join(lines)) if lines else "-"
    
@admin.register(EventCaption)
class EventCaptionAdmin(admin.ModelAdmin):
    # –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–Ω–æ –≤ —Å–ø–∏—Å–∫–µ
    list_display = (
        'get_event_type_display_name',
        'short_text',
        'short_caption',
        'is_active',
        'updated_at'
    )

    # –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä—è–º–æ –≤ —Å–ø–∏—Å–∫–µ
    list_editable = ('is_active',)

    # –§–∏–ª—å—Ç—Ä—ã —Å–ø—Ä–∞–≤–∞
    list_filter = ('event_type', 'is_active')

    # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ–¥–ø–∏—Å–∏
    search_fields = ('caption',)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Ç–∏–ø—É, –ø–æ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–≤–µ—Ä—Ö—É
    ordering = ('event_type', '-is_active')

    # –ß—Ç–æ–±—ã –ø–æ–ª–µ updated_at –±—ã–ª–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
    readonly_fields = ('updated_at',)

    # –£–¥–æ–±–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    def get_event_type_display_name(self, obj):
        return obj.get_event_type_display()
    get_event_type_display_name.short_description = "–¢–∏–ø —Å–æ–±—ã—Ç–∏—è"
    get_event_type_display_name.admin_order_field = 'event_type'

    # –ü—Ä–µ–≤—å—é –ø–æ–¥–ø–∏—Å–∏
    def short_text(self, obj):
        if not obj.text:
            return "-"
        return (obj.text.strip()[:60] + "...") if len(obj.text.strip()) > 60 else obj.text.strip()
    short_text.short_description = "–¢–µ–∫—Å—Ç –≤—ã–¥–∞—á–∏"

    def short_caption(self, obj):
        if not obj.caption:
            return "-"
        return (obj.caption.strip()[:60] + "...") if len(obj.caption.strip()) > 60 else obj.caption.strip()
    short_caption.short_description = "–ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ"
    
@admin.register(ProductTemplate)
class ProductTemplateAdmin(admin.ModelAdmin):
    list_display = ["name", "is_default", "created_at", "updated_at"]
    list_filter = ["is_default"]
    search_fields = ["name"]
    ordering = ["name"]
    
    fieldsets = (
        (None, {
            "fields": ("name", "is_default", "template"),
            "description": (
                "<p><strong>–ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:</strong> {brand}, {name}, {price_display}, "
                "{sizes_display}, {availability}, {link}, {sku}</p>"
            )
        }),
        ("–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {
            "fields": ("created_at", "updated_at"),
            "classes": ("collapse",),
        }),
    )

    readonly_fields = ["created_at", "updated_at"]

    def get_readonly_fields(self, request, obj=None):
        # –ó–∞–ø—Ä–µ—â–∞–µ–º –º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ –Ω–µ–≥–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è)
        if obj:
            return self.readonly_fields + ["name"]
        return self.readonly_fields