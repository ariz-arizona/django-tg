from asgiref.sync import sync_to_async
from django.db import models
from tg_bot.models import TgUser

bot_prefix = "Card Parser"

PRODUCT_TYPE_CHOICES = [
    ("ozon", "Ozon"),
    ("wb", "Wildberries"),
]

class Brand(models.Model):
    """–ú–æ–¥–µ–ª—å –±—Ä–µ–Ω–¥–∞ —Å —É—á—ë—Ç–æ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"""

    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞")
    brand_id = models.CharField(max_length=50, verbose_name="–í–Ω–µ—à–Ω–∏–π ID –±—Ä–µ–Ω–¥–∞")
    product_type = models.CharField(
        max_length=10, choices=PRODUCT_TYPE_CHOICES, verbose_name="–¢–∏–ø –ø–ª–æ—â–∞–¥–∫–∏"
    )

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        verbose_name = f"{bot_prefix}: –ë—Ä–µ–Ω–¥"
        verbose_name_plural = f"{bot_prefix}: –ë—Ä–µ–Ω–¥—ã"
        # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: –æ–¥–∏–Ω –±—Ä–µ–Ω–¥ –Ω–∞ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        unique_together = ("brand_id", "product_type")
        ordering = ["name"]

    def __str__(self):
        return f"{self.name} ({self.get_product_type_display()})"


class Category(models.Model):
    """–ú–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"""

    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    subject_id = models.IntegerField(verbose_name="subjectId / category_id")
    product_type = models.CharField(
        max_length=10, choices=PRODUCT_TYPE_CHOICES, verbose_name="–¢–∏–ø –ø–ª–æ—â–∞–¥–∫–∏"
    )

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        verbose_name = f"{bot_prefix}: –ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = f"{bot_prefix}: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
        unique_together = ("subject_id", "product_type")
        ordering = ["name"]

    def __str__(self):
        return f"{self.name} ({self.get_product_type_display()})"


class ParseProduct(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–µ."""

    product_id = models.CharField(max_length=255, verbose_name="ID —Ç–æ–≤–∞—Ä–∞")
    caption = models.TextField(verbose_name="–ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ")
    name = models.CharField(
        max_length=255,
        blank=True,
        null=True,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        help_text="–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    )
    product_type = models.CharField(
        max_length=10, choices=PRODUCT_TYPE_CHOICES, verbose_name="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞"
    )

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    brand = models.ForeignKey(
        Brand,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ë—Ä–µ–Ω–¥",
    )
    category = models.ForeignKey(
        Category,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
    )

    def __str__(self):
        return f"{self.get_product_type_display()} - {self.caption[:30]}"

    class Meta:
        verbose_name = f"{bot_prefix}: –ü—Ä–æ–¥—É–∫—Ç"
        verbose_name_plural = f"{bot_prefix}: –ü—Ä–æ–¥—É–∫—Ç—ã"


class ProductImage(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞ (Telegram file_id –∏–ª–∏ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞)"""

    IMAGE_TYPE_CHOICES = [
        ("telegram", "Telegram file_id"),
        ("link", "–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞"),
    ]

    image_type = models.CharField(
        max_length=10, choices=IMAGE_TYPE_CHOICES, verbose_name="–¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    )

    # –û–¥–∏–Ω –∏–∑ –¥–≤—É—Ö –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω
    file_id = models.CharField(
        max_length=500,  # Telegram file_id –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º
        blank=True,
        null=True,
        verbose_name="ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram",
    )
    url = models.URLField(
        max_length=1000,
        blank=True,
        null=True,
        verbose_name="–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    )

    # –°–≤—è–∑—å —Å —Ç–æ–≤–∞—Ä–æ–º
    product = models.ForeignKey(
        ParseProduct,
        on_delete=models.CASCADE,
        related_name="images",
        verbose_name="–¢–æ–≤–∞—Ä",
    )

    # –ê—É–¥–∏—Ç
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    class Meta:
        verbose_name = f"{bot_prefix}: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
        verbose_name_plural = f"{bot_prefix}: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"
        ordering = ["-created_at"]

    def __str__(self):
        if self.image_type == "telegram":
            return f"üì∑ {self.file_id[:20]}... (Telegram)"
        return f"üîó {self.url[:30]}... (Link)"


class TgUserProduct(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º."""

    tg_user = models.ForeignKey(
        TgUser,
        on_delete=models.CASCADE,
        related_name="user_products",
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    )
    product = models.ForeignKey(
        ParseProduct,
        on_delete=models.CASCADE,
        related_name="product_users",
        verbose_name="–ü—Ä–æ–¥—É–∫—Ç",
    )
    sent_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")

    class Meta:
        verbose_name = f"{bot_prefix}: –ü—Ä–æ–¥—É–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        verbose_name_plural = f"{bot_prefix}: –ü—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    def __str__(self):
        return f"{self.tg_user} -> {self.product}"

class BotSettings(models.Model):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞. –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π.
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ enforced –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    active = models.BooleanField(
        default=False,
        verbose_name="–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        help_text="–¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π."
    )

    picture_chat_id = models.CharField(
        max_length=50,
        verbose_name="Chat ID –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫",
        help_text="Telegram chat ID, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id"
    )

    parser_url_ozon = models.URLField(
        blank=True, null=True,
        verbose_name="URL –ø–∞—Ä—Å–µ—Ä–∞ Ozon",
        help_text="API –∏–ª–∏ –≤–µ–±-–∞–¥—Ä–µ—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ Ozon"
    )

    parser_url_wb = models.URLField(
        blank=True, null=True,
        verbose_name="URL –ø–∞—Ä—Å–µ—Ä–∞ Wildberries",
        help_text="API –∏–ª–∏ –≤–µ–±-–∞–¥—Ä–µ—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ Wildberries"
    )

    marketing_group_id = models.CharField(
        max_length=50,
        verbose_name="–ì—Ä—É–ø–ø–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞",
        help_text="Telegram chat ID –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"
    )

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")

    class Meta:
        verbose_name = f"{bot_prefix}: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
        verbose_name_plural = f"{bot_prefix}: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
        ordering = ["-created_at"]

        # üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î
        constraints = [
            # 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ active=True –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —É –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
            models.UniqueConstraint(
                fields=['active'],
                condition=models.Q(active=True),
                name='unique_active_settings'
            ),
        ]

    def __str__(self):
        return f"–ê–∫—Ç–∏–≤–Ω–æ ‚úÖ" if self.active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ ‚ùå"


    @classmethod
    def get_active_sync(cls):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç BotSettings –ò–õ–ò —Å–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
        """
        obj = cls.objects.filter(active=True).first()
        if obj:
            return obj

        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å-–∑–∞–≥–ª—É—à–∫—É
        return {
            "active": False,
            "picture_chat_id": "-1001890980411",
            "parser_url_ozon": "",
            "parser_url_wb": "",
            "marketing_group_id": "",
            "created_at": None,
            "updated_at": None,
        }

    @classmethod
    async def get_active(cls):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–ø–∏—Å—å.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç sync_to_async –≤–Ω—É—Ç—Ä–∏.
        """
        return await sync_to_async(cls.get_active_sync)()