from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe

from .models import Bot, TgUser
from .models import ParseProduct, TgUserProduct, Brand, Category, ProductImage
from .models import (
    TarotCard,
    ExtendedMeaning,
    TarotDeck,
    TarotCardItem,
    TarotMeaningCategory,
    TarotUserReading,
    OraculumItem,
    OraculumDeck,
    Rune
)


@admin.register(Bot)
class BotAdmin(admin.ModelAdmin):
    list_display = ("name", "token", "chat_id", "bot_type", "created_at", "updated_at")
    search_fields = ("name", "token", "chat_id")
    list_filter = ("bot_type", "created_at")


@admin.register(TgUserProduct)
class TgUserProductAdmin(admin.ModelAdmin):
    list_display = ("tg_user", "product", "sent_at")
    list_filter = ("sent_at",)
    search_fields = ("tg_user__username", "product__caption")


@admin.register(TarotCard)
class TarotCardAdmin(admin.ModelAdmin):
    list_display = ("card_id", "name", "is_major")  # –î–æ–±–∞–≤–ª–µ–Ω–æ card_id –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    list_editable = ("is_major",)  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ –≤ —Å–ø–∏—Å–∫–µ
    list_filter = ("is_major",)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–æ–º—É –ø–æ–ª—é
    search_fields = ("name", "card_id")  # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ ID –∫–∞—Ä—Ç—ã


@admin.register(ExtendedMeaning)
class ExtendedMeaningAdmin(admin.ModelAdmin):
    list_display = ("tarot_card", "category", "category_base", "text")


@admin.register(TarotMeaningCategory)
class CategoryAdmin(admin.ModelAdmin):
    pass


@admin.register(TarotDeck)
class TarotDeckAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ TarotDeck.
    """

    list_display = ("name", "link")  # –ü–æ–ª—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –≤ —Å–ø–∏—Å–∫–µ
    search_fields = ("name",)  # –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
    list_filter = ("name",)  # –§–∏–ª—å—Ç—Ä—ã –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏


@admin.register(TarotCardItem)
class CardAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ Card.
    """

    list_display = ("deck", "tarot_card", "img_id")  # –ü–æ–ª—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –≤ —Å–ø–∏—Å–∫–µ
    search_fields = ("deck__name", "tarot_card__name")  # –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
    list_filter = ("deck", "tarot_card")  # –§–∏–ª—å—Ç—Ä—ã –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏


@admin.register(TarotUserReading)
class TarotUserReadingAdmin(admin.ModelAdmin):
    # –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø–∏—Å–µ–π
    list_display = ("user", "date", "text", "message_id")

    # –ü–æ–ª—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏
    list_filter = ("user", "date")

    # –ü–æ–ª—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∑–∞–ø–∏—Å–∏
    search_fields = ("text", "user__username", "message_id")

    # –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–∏
    fieldsets = (
        (
            None,
            {
                "fields": ("user", "date", "text", "message_id"),
            },
        ),
    )

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è –¥–∞—Ç—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
    def get_readonly_fields(self, request, obj=None):
        if obj:  # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–µ—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            return self.readonly_fields + ("date",)
        return self.readonly_fields


@admin.register(OraculumDeck)
class OraculumDeckAdmin(admin.ModelAdmin):
    list_display = ("name", "description", "created_at")
    search_fields = ("name", "description")
    list_filter = ("created_at",)


@admin.register(OraculumItem)
class OraculumItemAdmin(admin.ModelAdmin):
    list_display = ("name", "deck", "description")
    search_fields = ("name", "description", "deck__name")
    list_filter = ("deck",)

@admin.register(Rune)
class RuneAdmin(admin.ModelAdmin):
    list_display = ("symbol", "type", "sticker")
    search_fields = ("type", "symbol")
    list_filter = ("type",)

    fieldsets = (
        ("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {
            "fields": ("type", "symbol", "sticker"),
        }),
        ("–ü—Ä—è–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", {
            "fields": (
                "straight_keys",
                "straight_meaning",
                "straight_pos_1",
                "straight_pos_2",
                "straight_pos_3",
            ),
        }),
        ("–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", {
            "fields": (
                "inverted_keys",
                "inverted_meaning",
                "inverted_pos_1",
                "inverted_pos_2",
                "inverted_pos_3",
            ),
        }),
    )
    
# === Inline: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ParseProduct ===
class ProductImageInline(admin.TabularInline):
    model = ProductImage
    extra = 0
    readonly_fields = ("image_preview", "image_type", "file_id", "url", "created_at")
    fields = ("image_preview", "image_type", "file_id", "url", "created_at")
    can_delete = False
    show_change_link = True

    def image_preview(self, obj):
        if not obj:
            return "-"
        if obj.image_type == "telegram":
            return format_html(
                '<img src="https://api.telegram.org/file/bot{token}/photo/{file_id}" '
                'style="width: 80px; height: auto;" />',
                token="YOUR_BOT_TOKEN",  # ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏ –∏–ª–∏ —É–±–µ—Ä–∏, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω –ø—Ä–µ–≤—å—é
            )
        elif obj.url:
            return format_html(
                '<img src="{url}" style="width: 80px; height: auto;" />',
                url=obj.url,
            )
        return "-"

    image_preview.short_description = "–ü—Ä–µ–≤—å—é"


# === –ê–¥–º–∏–Ω–∫–∞: ParseProduct ===
@admin.register(ParseProduct)
class ParseProductAdmin(admin.ModelAdmin):
    list_display = (
        "product_id",
        "product_type",
        "brand__name", "category__name",
        "created_at",
        "updated_at",
    )
    list_filter = ("product_type", "brand", "category", "created_at")
    search_fields = ("product_id", "caption", "brand__name", "category__name")
    readonly_fields = ("created_at", "updated_at")
    raw_id_fields = ("brand", "category")  # —É–¥–æ–±–Ω–æ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
    date_hierarchy = "created_at"
    ordering = ("-created_at",)

    fieldsets = (
        (
            "–û—Å–Ω–æ–≤–Ω–æ–µ",
            {
                "fields": ("product_id", "product_type", "caption"),
            },
        ),
        (
            "–°–≤—è–∑–∏",
            {
                "fields": ("brand", "category"),
            },
        ),
        (
            "–ê—É–¥–∏—Ç",
            {
                "fields": ("created_at", "updated_at"),
            },
        ),
    )

    inlines = [ProductImageInline]


# === –ê–¥–º–∏–Ω–∫–∞: ProductImage (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ) ===
@admin.register(ProductImage)
class ProductImageAdmin(admin.ModelAdmin):
    list_display = ("product", "image_type", "file_id_preview", "url_preview", "created_at")
    list_filter = ("image_type", "created_at")
    search_fields = ("file_id", "url", "product__product_id")
    readonly_fields = ("created_at", "updated_at", "file_id_preview", "url_preview")

    def file_id_preview(self, obj):
        if obj.file_id:
            return format_html('<span title="{}">{}</span>', obj.file_id, obj.file_id[:20] + "...")
        return "-"

    file_id_preview.short_description = "file_id"

    def url_preview(self, obj):
        if obj.url:
            return format_html('<a href="{0}" target="_blank">{0}</a>', obj.url)
        return "-"

    url_preview.short_description = "URL"
    
# === –ê–¥–º–∏–Ω–∫–∞: Brand ===
@admin.register(Brand)
class BrandAdmin(admin.ModelAdmin):
    list_display = (
        "name",
        "brand_id",
        "product_type",
        "products_count",
        "created_at",
    )
    list_filter = ("product_type", "created_at")
    search_fields = ("name", "brand_id")
    readonly_fields = ("created_at",)
    fieldsets = (
        (
            "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            {
                "fields": ("name", "brand_id", "product_type"),
            },
        ),
        (
            "–ê—É–¥–∏—Ç",
            {
                "fields": ("created_at",),
            },
        ),
    )
    ordering = ("name",)

    def products_count(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞"""
        count = obj.parseproduct_set.count()
        url = (
            f"/admin/parser/parseproduct/?brand__id={obj.id}"
            if hasattr(obj, "parseproduct_set")
            else "#"
        )
        return format_html(
            '<a href="{}" style="text-decoration: none;">üß© <strong>{}</strong></a>',
            url,
            count,
        )

    products_count.short_description = "–¢–æ–≤–∞—Ä—ã"
    products_count.allow_tags = True


# === –ê–¥–º–∏–Ω–∫–∞: Category ===
@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = (
        "name",
        "subject_id",
        "product_type",
        "products_count",
        "created_at",
    )
    list_filter = ("product_type", "created_at")
    search_fields = ("name", "subject_id")
    readonly_fields = ("created_at",)
    fieldsets = (
        (
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            {
                "fields": ("name", "subject_id", "product_type"),
            },
        ),
        (
            "–ê—É–¥–∏—Ç",
            {
                "fields": ("created_at",),
            },
        ),
    )
    ordering = ("name",)

    def products_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        count = obj.parseproduct_set.count()
        url = f"/admin/parser/parseproduct/?category__id={obj.id}"
        return format_html(
            '<a href="{}" style="text-decoration: none;">üì¶ <strong>{}</strong></a>',
            url,
            count,
        )

    products_count.short_description = "–¢–æ–≤–∞—Ä—ã"
    products_count.allow_tags = True