# Generated by Django 5.1.5 on 2025-08-26 09:58

import django.db.models.deletion
from django.db import migrations, models


def forwards_func(apps, schema_editor):
    ParseProduct = apps.get_model("tg_bot", "ParseProduct")
    ProductImage = apps.get_model("tg_bot", "ProductImage")

    images_to_create = []
    for product in (
        ParseProduct.objects.exclude(photo_id__isnull=True)
        .exclude(photo_id="")
        .exclude(photo_id__regex=r"^\s*$")
    ):
        media = product.photo_id.strip()

        # Определяем тип по началу строки
        if media.lower().startswith(("http://", "https://")):
            image_type = "link"
            file_id = None
            url = media
        else:
            image_type = "telegram"
            file_id = media
            url = None

        images_to_create.append(
            ProductImage(
                product=product,
                image_type=image_type,
                file_id=file_id,
                url=url,
            )
        )

    # Массовое создание
    ProductImage.objects.bulk_create(images_to_create)
    print(f"✅ Перенесено {len(images_to_create)} изображений в ProductImage")


def reverse_func(apps, schema_editor):
    # Обратная миграция: не удаляем данные, просто не делаем ничего
    # Или можно добавить логику удаления, если нужно
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("tg_bot", "0027_remove_category_parent_id"),
    ]

    operations = [
        migrations.CreateModel(
            name="ProductImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image_type",
                    models.CharField(
                        choices=[
                            ("telegram", "Telegram file_id"),
                            ("link", "Прямая ссылка"),
                        ],
                        max_length=10,
                        verbose_name="Тип изображения",
                    ),
                ),
                (
                    "file_id",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="ID изображения в Telegram",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True,
                        max_length=1000,
                        null=True,
                        verbose_name="Прямая ссылка на изображение",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Дата обновления"),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="tg_bot.parseproduct",
                        verbose_name="Товар",
                    ),
                ),
            ],
            options={
                "verbose_name": "Card Parser: Изображение товара",
                "verbose_name_plural": "Card Parser: Изображения товаров",
                "ordering": ["-created_at"],
            },
        ),
        migrations.RunPython(forwards_func, reverse_func),
        migrations.RemoveField(
            model_name="parseproduct",
            name="photo_id",
        ),
    ]
